import { createWorkflow, createStep } from '@mastra/core/workflows';
import { z } from 'zod';

// Gemini Flash„Çí‰ΩøÁî®„Åó„ÅüWebÊ§úÁ¥¢„Çπ„ÉÜ„ÉÉ„Éó
const geminiSearchStep = createStep({
  id: 'gemini-search',
  description: 'Gemini Flash„ÅÆGoogle Search grounding„Çí‰ΩøÁî®„Åó„Å¶WebÊ§úÁ¥¢„ÇíÂÆüË°å„Åó„Åæ„Åô',
  inputSchema: z.object({
    query: z.string(),
    maxResults: z.number().optional().default(10),
    language: z.string().optional().default('ja'),
    userLocation: z.object({
      country: z.string().optional().default('JP'),
      city: z.string().optional().default('Tokyo'),
      region: z.string().optional().default('Tokyo'),
    }).optional(),
  }),
  outputSchema: z.object({
    searchResults: z.array(z.object({
      title: z.string(),
      url: z.string(),
      snippet: z.string(),
      age: z.string().optional(),
    })),
    rawResults: z.string(),
    searchTime: z.number(),
    success: z.boolean(),
  }),
  execute: async ({ inputData, mastra, runtimeContext }) => {
    const { query, maxResults } = inputData;
    const startTime = Date.now();
    
    try {
      console.log(`üîç Gemini Flash„Çí‰ΩøÁî®„Åó„Å¶WebÊ§úÁ¥¢„ÇíÂÆüË°å: "${query}"`);
      
      // workflowSearchAgent„ÇíÂèñÂæó
      const agent = mastra?.getAgent('workflowSearchAgent');
      if (!agent) {
        throw new Error('workflowSearchAgent„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      }
      
      // runtimeContext„Åã„ÇâresourceId„Å®threadId„ÇíÂèñÂæó
      const resourceId = runtimeContext?.get('resourceId');
      const threadId = runtimeContext?.get('threadId');
      
      // „Ç®„Éº„Ç∏„Çß„É≥„Éà„Å´WebÊ§úÁ¥¢„Çí‰æùÈ†º
      const searchPrompt = `
‰ª•‰∏ã„Å´„Å§„ÅÑ„Å¶ÊúÄÊñ∞„ÅÆÊÉÖÂ†±„ÇíÊ§úÁ¥¢„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

${query}

Ê§úÁ¥¢ÁµêÊûú„Åã„Çâ${maxResults}‰ª∂Á®ãÂ∫¶„ÅÆÈñ¢ÈÄ£ÊÄß„ÅÆÈ´ò„ÅÑÊÉÖÂ†±„ÇíÈÅ∏„Å≥„ÄÅ„Åù„Çå„Åû„Çå„Å´„Å§„ÅÑ„Å¶‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßÊï¥ÁêÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

1. „Çø„Ç§„Éà„É´: [Ë®ò‰∫ã„ÇÑ„Éö„Éº„Ç∏„ÅÆ„Çø„Ç§„Éà„É´]
   URL: [ÊÉÖÂ†±Ê∫ê„ÅÆURL]
   Ê¶ÇË¶Å: [ÂÜÖÂÆπ„ÅÆË¶ÅÁ¥Ñ]
   
2. „Çø„Ç§„Éà„É´: ...
   Ôºà‰ª•‰∏ãÂêåÊßòÔºâ

ÈáçË¶ÅÔºö‰ø°È†ºÊÄß„ÅÆÈ´ò„ÅÑÊÉÖÂ†±Ê∫ê„ÇíÂÑ™ÂÖà„Åó„ÄÅÊúÄÊñ∞„ÅÆÊÉÖÂ†±„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
`;
      
      console.log('üì° „Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅÆ„Çπ„Éà„É™„Éº„É†„ÇíÈñãÂßã...');
      const response = await agent.stream([
        {
          role: 'user',
          content: searchPrompt
        }
      ], { 
        memory: resourceId && threadId ? {
          resource: resourceId as string,
          thread: threadId as string
        } : undefined
      });
      
      // „Çπ„Éà„É™„Éº„É†„Åã„ÇâÁµêÊûú„ÇíÂèéÈõÜ
      let searchResults = [];
      let rawResults = '';
      let textResponse = '';
      let success = false;
      const toolExecuted = false;
      
      console.log('üîÑ „Çπ„Éà„É™„Éº„É†„ÇíÂá¶ÁêÜ‰∏≠...');
      
      // Gemini Flash„ÅØGoogle Search grounding„ÇíÂÜÖËîµ„Åó„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅ
      // „ÉÑ„Éº„É´Âëº„Å≥Âá∫„Åó„Åß„ÅØ„Å™„Åè„ÄÅÁõ¥Êé•Ê§úÁ¥¢ÁµêÊûú„ÅåÂê´„Åæ„Çå„Åü„ÉÜ„Ç≠„Çπ„Éà„ÅåËøî„Åï„Çå„Çã
      for await (const chunk of response.fullStream) {
        // „ÉÜ„Ç≠„Çπ„Éà„Éá„É´„Çø„ÅÆÂá¶ÁêÜ
        if (chunk.type === 'text-delta') {
          textResponse += chunk.textDelta;
        }
      }
      
      // Ê§úÁ¥¢„ÅåÂÆüË°å„Åï„Çå„Åü„Åã„Å©„ÅÜ„Åã„ÅØ„ÉÜ„Ç≠„Çπ„ÉàÂÜÖÂÆπ„Åã„ÇâÂà§Êñ≠
      if (textResponse && textResponse.includes('http')) {
        console.log('‚úÖ Google Search grounding„Å´„Çà„ÇãÊ§úÁ¥¢„ÅåÂÆüË°å„Åï„Çå„Åæ„Åó„Åü');
        success = true;
      }
      
      console.log(`üìù „Çπ„Éà„É™„Éº„É†Âá¶ÁêÜÂÆå‰∫Ü - „ÉÑ„Éº„É´ÂÆüË°å: ${toolExecuted}, ÊàêÂäü: ${success}`);
      console.log(`üìù „ÉÜ„Ç≠„Çπ„ÉàÂøúÁ≠î„ÅÆÈï∑„Åï: ${textResponse.length}`);
      
      // Gemini Flash„ÅÆÂøúÁ≠î„Åã„ÇâÊ§úÁ¥¢ÁµêÊûú„ÇíÊäΩÂá∫
      if (success && textResponse) {
        console.log('üìù Gemini Flash„ÅÆÂøúÁ≠î„Åã„ÇâÊ§úÁ¥¢ÁµêÊûú„ÇíÊäΩÂá∫‰∏≠...');
        const agentResponse = textResponse;
        
        // „Çø„Ç§„Éà„É´„ÄÅURL„ÄÅÊ¶ÇË¶Å„ÅÆ„Éë„Çø„Éº„É≥„ÇíÊäΩÂá∫
        const lines = agentResponse.split('\n');
        let currentResult: { title?: string; url?: string; snippet?: string; age?: string } = {};
        
        for (const line of lines) {
          // Áï™Âè∑‰ªò„Åç„ÅÆÁµêÊûú„ÇíÊ§úÂá∫Ôºà‰æã: "1. „Çø„Ç§„Éà„É´:"Ôºâ
          const numberMatch = line.match(/^(\d+)\.\s*(„Çø„Ç§„Éà„É´:|Title:)/);
          if (numberMatch) {
            // Ââç„ÅÆÁµêÊûú„Çí‰øùÂ≠ò
            if (currentResult.title && currentResult.url) {
              searchResults.push({
                title: currentResult.title,
                url: currentResult.url,
                snippet: currentResult.snippet || '',
                age: currentResult.age || ''
              });
            }
            currentResult = { 
              title: line.replace(/^\d+\.\s*(„Çø„Ç§„Éà„É´:|Title:)\s*/, '').trim() 
            };
          }
          // „Çø„Ç§„Éà„É´Ë°å„ÅÆÂá¶ÁêÜÔºàÁï™Âè∑„Å™„ÅóÔºâ
          else if (line.includes('„Çø„Ç§„Éà„É´:') || line.includes('Title:')) {
            if (currentResult.title && currentResult.url) {
              searchResults.push({
                title: currentResult.title,
                url: currentResult.url,
                snippet: currentResult.snippet || '',
                age: currentResult.age || ''
              });
            }
            currentResult = { title: line.replace(/^(„Çø„Ç§„Éà„É´:|Title:)\s*/, '').trim() };
          }
          // URLË°å„ÅÆÂá¶ÁêÜ
          else if (line.match(/^\s*(URL:|url:)/)) {
            currentResult.url = line.replace(/^\s*(URL:|url:)\s*/, '').trim();
          }
          // Ê¶ÇË¶ÅË°å„ÅÆÂá¶ÁêÜ
          else if (line.match(/^\s*(Ê¶ÇË¶Å:|Description:|Snippet:)/)) {
            currentResult.snippet = line.replace(/^\s*(Ê¶ÇË¶Å:|Description:|Snippet:)\s*/, '').trim();
          }
        }
        
        // ÊúÄÂæå„ÅÆÁµêÊûú„ÇíËøΩÂä†
        if (currentResult.title && currentResult.url) {
          searchResults.push({
            title: currentResult.title,
            url: currentResult.url,
            snippet: currentResult.snippet || '',
            age: currentResult.age || ''
          });
        }
        
        console.log(`üìä ${searchResults.length}‰ª∂„ÅÆÊ§úÁ¥¢ÁµêÊûú„ÇíÊäΩÂá∫„Åó„Åæ„Åó„Åü`);
        rawResults = textResponse;
      }
      
      
      const searchTime = Date.now() - startTime;
      
      console.log(`‚úÖ Gemini FlashÊ§úÁ¥¢ÂÆå‰∫Ü (${searchTime}ms)`);
      console.log(`üìä Ê§úÁ¥¢ÁµêÊûú: ${searchResults.length}‰ª∂`);
      
      // ÁµêÊûú„ÅåÂèñÂæó„Åß„Åç„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
      if (!success || searchResults.length === 0) {
        console.warn('‚ö†Ô∏è Ê§úÁ¥¢ÁµêÊûú„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü');
        console.warn(`‚ö†Ô∏è „ÉÑ„Éº„É´ÂÆüË°å: ${toolExecuted}, ÊàêÂäü: ${success}, ÁµêÊûúÊï∞: ${searchResults.length}`);
        
        // „Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅÆÂøúÁ≠î„Åã„Çâ‰Ωï„ÅãÊÉÖÂ†±„ÅåÂèñ„Çå„Çã„ÅãË©¶„Åø„Çã
        if (textResponse && textResponse.includes(query)) {
          console.log('üìù „ÉÜ„Ç≠„Çπ„ÉàÂøúÁ≠î„Åã„ÇâÊÉÖÂ†±„ÇíÊäΩÂá∫„Åó„Åæ„Åô');
          searchResults = [{
            title: `${query}„Å´Èñ¢„Åô„ÇãÊ§úÁ¥¢ÁµêÊûú`,
            url: `https://www.google.com/search?q=${encodeURIComponent(query)}`,
            snippet: textResponse.substring(0, 200) + '...',
            age: '',
          }];
        } else {
          console.warn('‚ö†Ô∏è Ê§úÁ¥¢ÁµêÊûú„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü');
          // Á©∫„ÅÆÁµêÊûú„ÅÆ„Åæ„ÅæÁ∂öË°å
        }
        
        return {
          searchResults,
          rawResults: JSON.stringify({ web: { results: searchResults } }),
          searchTime: Date.now() - startTime,
          success: true,
        };
      }
      
      return {
        searchResults,
        rawResults,
        searchTime,
        success: true,
      };
    } catch (error) {
      console.error('‚ùå Gemini FlashÊ§úÁ¥¢„Ç®„É©„Éº:', error);
      console.error('„Ç®„É©„Éº„ÅÆË©≥Á¥∞:', {
        name: error instanceof Error ? error.name : 'Unknown',
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      });
      
      const searchTime = Date.now() - startTime;
      
      // „Ç®„É©„ÉºÊôÇ„ÅØÁ©∫„ÅÆÁµêÊûú„ÇíËøî„Åô
      return {
        searchResults: [],
        rawResults: '',
        searchTime,
        success: false,
      };
    }
  },
});

// Ê§úÁ¥¢ÁµêÊûú„ÅÆÂ¶•ÂΩìÊÄßÂà§Êñ≠„Çπ„ÉÜ„ÉÉ„Éó
const validateSearchResultsStep = createStep({
  id: 'validate-search-results',
  description: 'workflowAgent„ÅåÊ§úÁ¥¢ÁµêÊûú„ÅÆÂ¶•ÂΩìÊÄß„ÇíÂà§Êñ≠„Åó„Åæ„Åô',
  inputSchema: z.object({
    searchResults: z.array(z.object({
      title: z.string(),
      url: z.string(),
      snippet: z.string(),
      age: z.string().optional(),
    })),
    rawResults: z.string(),
    searchTime: z.number(),
    success: z.boolean(),
  }),
  outputSchema: z.object({
    isValid: z.boolean(),
    validationScore: z.number(),
    feedback: z.string(),
    shouldRetry: z.boolean(),
    refinedQuery: z.string().optional(),
  }),
  execute: async ({ inputData, getInitData, runtimeContext, mastra }) => {
    const { searchResults, success } = inputData;
    const { query } = getInitData();
    
    try {
      console.log(`üßê Ê§úÁ¥¢ÁµêÊûú„ÅÆÂ¶•ÂΩìÊÄß„ÇíÂà§Êñ≠‰∏≠...`);
      
      // workflowSearchAgent„ÇíÂèñÂæó
      const agent = mastra?.getAgent('workflowSearchAgent');
      if (!agent) {
        throw new Error('workflowSearchAgent„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      }
      
      // runtimeContext„Åã„ÇâresourceId„Å®threadId„ÇíÂèñÂæó
      const resourceId = runtimeContext?.get('resourceId');
      const threadId = runtimeContext?.get('threadId');
      
      // Â¶•ÂΩìÊÄßÂà§Êñ≠„Éó„É≠„É≥„Éó„Éà
      const validationPrompt = `‰ª•‰∏ã„ÅÆÊ§úÁ¥¢ÁµêÊûú„ÇíË©ï‰æ°„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

**Ê§úÁ¥¢„ÇØ„Ç®„É™**: "${query}"
**Ê§úÁ¥¢ÁµêÊûúÊï∞**: ${searchResults.length}‰ª∂
**Ê§úÁ¥¢ÊàêÂäü**: ${success ? '„ÅØ„ÅÑ' : '„ÅÑ„ÅÑ„Åà'}

**Ê§úÁ¥¢ÁµêÊûú**:
${searchResults.map((result, index) => `
${index + 1}. ${result.title}
   URL: ${result.url}
   Ê¶ÇË¶Å: ${result.snippet}
   ${result.age ? `Êõ¥Êñ∞: ${result.age}` : ''}
`).join('\n')}

‰ª•‰∏ã„ÅÆË¶≥ÁÇπ„Åã„ÇâË©ï‰æ°„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

1. **Èñ¢ÈÄ£ÊÄß**: Ê§úÁ¥¢ÁµêÊûú„ÅØ„ÇØ„Ç®„É™„Å´Èñ¢ÈÄ£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü
2. **‰ø°È†ºÊÄß**: ÊÉÖÂ†±Ê∫ê„ÅØ‰ø°È†º„Åß„Åç„Åæ„Åô„ÅãÔºü
3. **ÂÆåÂÖ®ÊÄß**: ÂøÖË¶Å„Å™ÊÉÖÂ†±„ÅåÂçÅÂàÜ„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü
4. **ÊúÄÊñ∞ÊÄß**: ÊÉÖÂ†±„ÅØÊúÄÊñ∞„Åß„Åô„ÅãÔºü

Ë©ï‰æ°ÁµêÊûú„Çí‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„ÅßËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
{
  "validationScore": 0-100„ÅÆÊï∞ÂÄ§,
  "isValid": true/falseÔºà60ÁÇπ‰ª•‰∏ä„ÅßtrueÔºâ,
  "feedback": "Ë©ï‰æ°„ÅÆË©≥Á¥∞Ë™¨Êòé",
  "shouldRetry": true/falseÔºàÂÜçÊ§úÁ¥¢„ÅåÂøÖË¶Å„ÅãÔºâ,
  "refinedQuery": "„Çà„ÇäËâØ„ÅÑÊ§úÁ¥¢„ÇØ„Ç®„É™ÔºàÂÜçÊ§úÁ¥¢„ÅåÂøÖË¶Å„Å™Â†¥Âêà„ÅÆ„ÅøÔºâ"
}`;

      const { text } = await agent.generate(
        validationPrompt,
        { 
          memory: resourceId && threadId ? {
            resource: resourceId as string,
            thread: threadId as string
          } : undefined
        }
      );
      
      // Ë©ï‰æ°ÁµêÊûú„Çí„Éë„Éº„Çπ
      let evaluation;
      try {
        evaluation = JSON.parse(text);
      } catch {
        // JSONËß£ÊûêÂ§±ÊïóÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        evaluation = {
          validationScore: searchResults.length > 0 ? 60 : 30,
          isValid: searchResults.length > 3,
          feedback: text,
          shouldRetry: searchResults.length < 3,
          refinedQuery: undefined,
        };
      }
      
      console.log(`‚úÖ Â¶•ÂΩìÊÄßÂà§Êñ≠ÂÆå‰∫Ü („Çπ„Ç≥„Ç¢: ${evaluation.validationScore}/100)`);
      
      return {
        isValid: evaluation.isValid || false,
        validationScore: evaluation.validationScore || 50,
        feedback: evaluation.feedback || 'Ë©ï‰æ°ÁµêÊûú„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü',
        shouldRetry: evaluation.shouldRetry || false,
        refinedQuery: evaluation.refinedQuery,
      };
    } catch (error) {
      console.error('Â¶•ÂΩìÊÄßÂà§Êñ≠„Ç®„É©„Éº:', error);
      
      // „Ç®„É©„ÉºÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
      return {
        isValid: searchResults.length > 0,
        validationScore: searchResults.length > 0 ? 50 : 0,
        feedback: `Â¶•ÂΩìÊÄßÂà§Êñ≠‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error instanceof Error ? error.message : 'Unknown error'}`,
        shouldRetry: searchResults.length === 0,
        refinedQuery: undefined,
      };
    }
  },
});

// Ê§úÁ¥¢ÁµêÊûú„ÅÆÁµ±Âêà„Å®ÂõûÁ≠îÁîüÊàê„Çπ„ÉÜ„ÉÉ„Éó
const analyzeSearchResultsStep = createStep({
  id: 'analyze-search-results',
  description: 'workflowAgent„ÅåÊ§úÁ¥¢ÁµêÊûú„ÇíÁµ±Âêà„Åó„ÄÅË≥™Âïè„Å´ÂØæ„Åô„ÇãÂåÖÊã¨ÁöÑ„Å™ÂõûÁ≠î„ÇíÁîüÊàê„Åó„Åæ„Åô',
  inputSchema: z.object({
    needsRetry: z.boolean(),
    retryQuery: z.string(),
    currentRetryCount: z.number(),
  }),
  outputSchema: z.object({
    summary: z.string(),
    detailedInfo: z.array(z.string()),
    additionalInfo: z.string(),
    sources: z.array(z.object({
      title: z.string(),
      url: z.string(),
    })),
  }),
  execute: async ({ getInitData, getStepResult, runtimeContext, mastra }) => {
    const { query } = getInitData();
    const { searchResults } = getStepResult(geminiSearchStep);
    
    try {
      console.log(`üß† Ê§úÁ¥¢ÁµêÊûú„ÇíÁµ±Âêà„Åó„Å¶ÂõûÁ≠î„ÇíÁîüÊàê‰∏≠...`);
      
      // workflowSearchAgent„ÇíÂèñÂæó
      const agent = mastra?.getAgent('workflowSearchAgent');
      if (!agent) {
        throw new Error('workflowSearchAgent„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      }
      
      // runtimeContext„Åã„ÇâresourceId„Å®threadId„ÇíÂèñÂæó
      const resourceId = runtimeContext?.get('resourceId');
      const threadId = runtimeContext?.get('threadId');
      
      // Áµ±ÂêàÂõûÁ≠îÁîüÊàê„Éó„É≠„É≥„Éó„Éà
      const analysisPrompt = `‰ª•‰∏ã„ÅÆÊ§úÁ¥¢ÁµêÊûú„ÇíÁ∑èÂêàÁöÑ„Å´ÂàÜÊûê„Åó„ÄÅ„Äå${query}„Äç„Å®„ÅÑ„ÅÜË≥™Âïè„Å´ÂØæ„Åô„ÇãÂåÖÊã¨ÁöÑ„Å™ÂõûÁ≠î„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

**Ê§úÁ¥¢ÁµêÊûú**:
${searchResults.map((result, index) => `
${index + 1}. ${result.title}
   URL: ${result.url}
   Ê¶ÇË¶Å: ${result.snippet}
   ${result.age ? `Êõ¥Êñ∞: ${result.age}` : ''}
`).join('\n')}

‰ª•‰∏ã„ÅÆÁÇπ„Å´Ê≥®ÊÑè„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
1. Ë§áÊï∞„ÅÆÊÉÖÂ†±Ê∫ê„Åã„ÇâÂæó„ÅüÊÉÖÂ†±„ÇíÁµ±Âêà„Åó„Å¶„ÄÅ‰∏ÄË≤´ÊÄß„ÅÆ„ÅÇ„ÇãÂõûÁ≠î„Çí‰ΩúÊàê
2. Ë≥™Âïè„Å´Áõ¥Êé•Á≠î„Åà„ÇãÂΩ¢„ÅßË®òËø∞
3. ÈáçË¶Å„Å™ÊÉÖÂ†±„ÅØÊßãÈÄ†Âåñ„Åó„Å¶Êï¥ÁêÜ
4. ÁüõÁõæ„Åô„ÇãÊÉÖÂ†±„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åù„ÅÆÊó®„ÇíÊòéË®ò
5. Â∞ÇÈñÄÁî®Ë™û„ÅØÂøÖË¶Å„Å´Âøú„Åò„Å¶Ë™¨Êòé„ÇíÂä†„Åà„Çã

JSONÂΩ¢Âºè„Åß‰ª•‰∏ã„ÅÆÊßãÈÄ†„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
{
  "summary": "Ë≥™Âïè„Å∏„ÅÆÁõ¥Êé•ÁöÑ„Å™ÂõûÁ≠îÔºà1-2ÊÆµËêΩÔºâ",
  "detailedInfo": [
    "ÈáçË¶Å„Å™„Éù„Ç§„É≥„Éà1",
    "ÈáçË¶Å„Å™„Éù„Ç§„É≥„Éà2",
    "ÈáçË¶Å„Å™„Éù„Ç§„É≥„Éà3"
  ],
  "additionalInfo": "Ë£úË∂≥ÊÉÖÂ†±„ÇÑÊ≥®ÊÑèÁÇπ"
}`;

      const { text: responseText } = await agent.generate(
        analysisPrompt,
        { 
          memory: resourceId && threadId ? {
            resource: resourceId as string,
            thread: threadId as string
          } : undefined
        }
      );
      
      // ÂõûÁ≠î„Çí„Éë„Éº„Çπ
      let parsedResponse;
      try {
        parsedResponse = JSON.parse(responseText);
      } catch {
        // JSONËß£ÊûêÂ§±ÊïóÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        parsedResponse = {
          summary: responseText,
          detailedInfo: [],
          additionalInfo: ''
        };
      }
      
      // ÊÉÖÂ†±Ê∫ê„É™„Çπ„Éà„Çí‰ΩúÊàê
      const sources = searchResults.map(result => ({
        title: result.title,
        url: result.url,
      }));
      
      console.log(`‚úÖ ÂõûÁ≠îÁîüÊàêÂÆå‰∫Ü`);
      
      return {
        summary: parsedResponse.summary || `„Äå${query}„Äç„Å´„Å§„ÅÑ„Å¶„ÅÆÊÉÖÂ†±„Çí„Åæ„Å®„ÇÅ„Åæ„Åó„Åü„ÄÇ`,
        detailedInfo: parsedResponse.detailedInfo || [`Ê§úÁ¥¢ÁµêÊûú: ${searchResults.length}‰ª∂`],
        additionalInfo: parsedResponse.additionalInfo || '',
        sources,
      };
    } catch (error) {
      console.error('ÂàÜÊûê„Ç®„É©„Éº:', error);
      
      // „Ç®„É©„ÉºÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
      return {
        summary: `„Äå${query}„Äç„Å´„Å§„ÅÑ„Å¶„ÅÆÊ§úÁ¥¢„ÇíÂÆüË°å„Åó„Åæ„Åó„Åü„Åå„ÄÅÂàÜÊûê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ`,
        detailedInfo: [
          `Ê§úÁ¥¢ÁµêÊûú: ${searchResults.length}‰ª∂ÂèñÂæó`,
          '„Ç®„É©„Éº„Å´„Çà„ÇäË©≥Á¥∞„Å™ÂàÜÊûê„ÅØÂÆüË°å„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü',
        ],
        additionalInfo: `„Ç®„É©„ÉºË©≥Á¥∞: ${error instanceof Error ? error.message : 'Unknown error'}`,
        sources: searchResults.map(result => ({
          title: result.title,
          url: result.url,
        })),
      };
    }
  },
});

// ÊúÄÁµÇ„É¨„Éù„Éº„ÉàÁîüÊàê„Çπ„ÉÜ„ÉÉ„Éó
const generateWebSearchReportStep = createStep({
  id: 'generate-web-search-report',
  description: 'WebÊ§úÁ¥¢ÁµêÊûú„Å®ÂàÜÊûê„ÇíÁµ±Âêà„Åó„ÅüÊúÄÁµÇ„É¨„Éù„Éº„Éà„ÇíÁîüÊàê„Åó„Åæ„Åô',
  inputSchema: z.object({
    summary: z.string(),
    detailedInfo: z.array(z.string()),
    additionalInfo: z.string(),
    sources: z.array(z.object({
      title: z.string(),
      url: z.string(),
    })),
  }),
  outputSchema: z.object({
    report: z.string(),
    metadata: z.object({
      jobId: z.string(),
      completedAt: z.string(),
      processingTime: z.number(),
      searchEngine: z.string(),
      citationCount: z.number(),
      retryCount: z.number(),
    }),
  }),
  execute: async ({ inputData, runId, getInitData, getStepResult, runtimeContext }) => {
    const startTime = Date.now();
    
    const {
      summary,
      detailedInfo,
      additionalInfo,
      sources,
    } = inputData;
    
    const { query } = getInitData();
    const { searchTime } = getStepResult(geminiSearchStep);
    
    // ÂÜçË©¶Ë°åÂõûÊï∞„ÇíÂèñÂæóÔºàruntimeContext„Åã„ÇâÂèñÂæó„ÄÅ„Éá„Éï„Ç©„É´„Éà„ÅØ0Ôºâ
    const retryCount = runtimeContext?.get('retryCount') || 0;
    
    // „Ç∑„É≥„Éó„É´„Å™„É¨„Éù„Éº„Éà„ÇíÁîüÊàê
    const report = `
# „Äå${query}„Äç„Å´„Å§„ÅÑ„Å¶„ÅÆË™øÊüªÁµêÊûú

## Ê¶ÇË¶Å
${summary}

## Ë©≥Á¥∞ÊÉÖÂ†±
${detailedInfo.map(info => `- ${info}`).join('\n')}

${additionalInfo ? `## ËøΩÂä†ÊÉÖÂ†±
${additionalInfo}` : ''}

## ÂèÇËÄÉË≥áÊñô
${sources.length > 0 
  ? sources.map((source, index) => `${index + 1}. [${source.title}](${source.url})`).join('\n')
  : 'ÂèÇËÄÉË≥áÊñô„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ'
}

---
Ê§úÁ¥¢Êó•ÊôÇ: ${new Date().toLocaleString('ja-JP')} | ÊÉÖÂ†±Ê∫ê: ${sources.length}‰ª∂
    `.trim();
    
    const processingTime = Date.now() - startTime;
    
    console.log(`üìù WebÊ§úÁ¥¢„É¨„Éù„Éº„ÉàÁîüÊàêÂÆå‰∫Ü (${processingTime}ms)`);
    
    return {
      report,
      metadata: {
        jobId: runId || `search-job-${Date.now()}`,
        completedAt: new Date().toISOString(),
        processingTime: searchTime + processingTime,
        searchEngine: 'Google Search (Gemini Flash)',
        citationCount: sources.length,
        retryCount: retryCount as number,
      },
    };
  },
});

// ÂÜçÊ§úÁ¥¢Âà§Êñ≠„Çπ„ÉÜ„ÉÉ„Éó
const checkRetryStep = createStep({
  id: 'check-retry',
  description: 'Ê§úÁ¥¢ÁµêÊûú„Åå‰∏çÂçÅÂàÜ„Åã„Å©„ÅÜ„Åã„ÇíÂà§Êñ≠„Åó„ÄÅÂÜçÊ§úÁ¥¢„ÅåÂøÖË¶Å„Å™Â†¥Âêà„ÅØÊ∫ñÂÇô„Åó„Åæ„Åô',
  inputSchema: z.object({
    isValid: z.boolean(),
    validationScore: z.number(),
    feedback: z.string(),
    shouldRetry: z.boolean(),
    refinedQuery: z.string().optional(),
  }),
  outputSchema: z.object({
    needsRetry: z.boolean(),
    retryQuery: z.string(),
    currentRetryCount: z.number(),
  }),
  execute: async ({ inputData, getInitData, runtimeContext }) => {
    const { shouldRetry, refinedQuery, validationScore } = inputData;
    const initData = getInitData();
    const currentRetryCount = (runtimeContext?.get('retryCount') || 0) as number;
    
    // ÂÜçË©¶Ë°å„ÅåÂøÖË¶Å„Åã„Å©„ÅÜ„Åã„ÇíÂà§Êñ≠
    const needsRetry = shouldRetry && validationScore < 60 && currentRetryCount < 3;
    
    if (needsRetry) {
      console.log(`üîÑ ÂÜçÊ§úÁ¥¢„ÅåÂøÖË¶Å„Åß„Åô (Ë©¶Ë°åÂõûÊï∞: ${currentRetryCount + 1}/3)`);
      runtimeContext?.set('retryCount', currentRetryCount + 1);
    }
    
    return {
      needsRetry,
      retryQuery: refinedQuery || initData.query,
      currentRetryCount: needsRetry ? currentRetryCount + 1 : currentRetryCount,
    };
  },
});

// WebÊ§úÁ¥¢„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÔºàGemini FlashÁâàÔºâ
export const webSearchWorkflow = createWorkflow({
  id: 'web-search-workflow',
  description: 'Gemini Flash„ÅÆGoogle Search grounding„Çí‰ΩøÁî®„Åó„Å¶WebÊ§úÁ¥¢„Å®ÂàÜÊûê„ÇíË°å„ÅÑ„Åæ„Åô',
  inputSchema: z.object({
    query: z.string(),
    maxResults: z.number().optional().default(10),
    language: z.string().optional().default('ja'),
    userLocation: z.object({
      country: z.string().optional().default('JP'),
      city: z.string().optional().default('Tokyo'),
      region: z.string().optional().default('Tokyo'),
    }).optional(),
  }),
  outputSchema: z.object({
    report: z.string(),
    metadata: z.object({
      jobId: z.string(),
      completedAt: z.string(),
      processingTime: z.number(),
      searchEngine: z.string(),
      citationCount: z.number(),
      retryCount: z.number(),
    }),
  }),
})
  .then(geminiSearchStep)
  .then(validateSearchResultsStep)
  .then(checkRetryStep)
  .then(analyzeSearchResultsStep)
  .then(generateWebSearchReportStep)
  .commit(); 