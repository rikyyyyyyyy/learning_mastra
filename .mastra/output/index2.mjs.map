{"version":3,"file":"index2.mjs","sources":["../../src/mastra/workflows/weather-workflow.ts","../../src/mastra/workflows/web-search-workflow-mcp.ts","../../src/mastra/workflows/slide-generation-workflow.ts","../../src/mastra/shared-memory.ts","../../src/mastra/agents/weather-agent.ts","../../src/mastra/agents/general-agent.ts","../../src/mastra/agents/workflow-agent.ts","../../src/mastra/index.ts"],"sourcesContent":["import { createStep, createWorkflow } from '@mastra/core/workflows';\nimport { z } from 'zod';\n\nconst forecastSchema = z.object({\n  date: z.string(),\n  maxTemp: z.number(),\n  minTemp: z.number(),\n  precipitationChance: z.number(),\n  condition: z.string(),\n  location: z.string(),\n});\n\nfunction getWeatherCondition(code: number): string {\n  const conditions: Record<number, string> = {\n    0: 'Clear sky',\n    1: 'Mainly clear',\n    2: 'Partly cloudy',\n    3: 'Overcast',\n    45: 'Foggy',\n    48: 'Depositing rime fog',\n    51: 'Light drizzle',\n    53: 'Moderate drizzle',\n    55: 'Dense drizzle',\n    61: 'Slight rain',\n    63: 'Moderate rain',\n    65: 'Heavy rain',\n    71: 'Slight snow fall',\n    73: 'Moderate snow fall',\n    75: 'Heavy snow fall',\n    95: 'Thunderstorm',\n  };\n  return conditions[code] || 'Unknown';\n}\n\nconst fetchWeather = createStep({\n  id: 'fetch-weather',\n  description: 'Fetches weather forecast for a given city',\n  inputSchema: z.object({\n    city: z.string().describe('The city to get the weather for'),\n  }),\n  outputSchema: forecastSchema,\n  execute: async ({ inputData }) => {\n    if (!inputData) {\n      throw new Error('Input data not found');\n    }\n\n    const geocodingUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(inputData.city)}&count=1`;\n    const geocodingResponse = await fetch(geocodingUrl);\n    const geocodingData = (await geocodingResponse.json()) as {\n      results: { latitude: number; longitude: number; name: string }[];\n    };\n\n    if (!geocodingData.results?.[0]) {\n      throw new Error(`Location '${inputData.city}' not found`);\n    }\n\n    const { latitude, longitude, name } = geocodingData.results[0];\n\n    const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=precipitation,weathercode&timezone=auto,&hourly=precipitation_probability,temperature_2m`;\n    const response = await fetch(weatherUrl);\n    const data = (await response.json()) as {\n      current: {\n        time: string;\n        precipitation: number;\n        weathercode: number;\n      };\n      hourly: {\n        precipitation_probability: number[];\n        temperature_2m: number[];\n      };\n    };\n\n    const forecast = {\n      date: new Date().toISOString(),\n      maxTemp: Math.max(...data.hourly.temperature_2m),\n      minTemp: Math.min(...data.hourly.temperature_2m),\n      condition: getWeatherCondition(data.current.weathercode),\n      precipitationChance: data.hourly.precipitation_probability.reduce(\n        (acc, curr) => Math.max(acc, curr),\n        0,\n      ),\n      location: name,\n    };\n\n    return forecast;\n  },\n});\n\nconst planActivities = createStep({\n  id: 'plan-activities',\n  description: 'Suggests activities based on weather conditions',\n  inputSchema: forecastSchema,\n  outputSchema: z.object({\n    activities: z.string(),\n  }),\n  execute: async ({ inputData, mastra }) => {\n    const forecast = inputData;\n\n    if (!forecast) {\n      throw new Error('Forecast data not found');\n    }\n\n    const agent = mastra?.getAgent('weatherAgent');\n    if (!agent) {\n      throw new Error('Weather agent not found');\n    }\n\n    const prompt = `Based on the following weather forecast for ${forecast.location}, suggest appropriate activities:\n      ${JSON.stringify(forecast, null, 2)}\n      For each day in the forecast, structure your response exactly as follows:\n\n      📅 [Day, Month Date, Year]\n      ═══════════════════════════\n\n      🌡️ WEATHER SUMMARY\n      • Conditions: [brief description]\n      • Temperature: [X°C/Y°F to A°C/B°F]\n      • Precipitation: [X% chance]\n\n      🌅 MORNING ACTIVITIES\n      Outdoor:\n      • [Activity Name] - [Brief description including specific location/route]\n        Best timing: [specific time range]\n        Note: [relevant weather consideration]\n\n      🌞 AFTERNOON ACTIVITIES\n      Outdoor:\n      • [Activity Name] - [Brief description including specific location/route]\n        Best timing: [specific time range]\n        Note: [relevant weather consideration]\n\n      🏠 INDOOR ALTERNATIVES\n      • [Activity Name] - [Brief description including specific venue]\n        Ideal for: [weather condition that would trigger this alternative]\n\n      ⚠️ SPECIAL CONSIDERATIONS\n      • [Any relevant weather warnings, UV index, wind conditions, etc.]\n\n      Guidelines:\n      - Suggest 2-3 time-specific outdoor activities per day\n      - Include 1-2 indoor backup options\n      - For precipitation >50%, lead with indoor activities\n      - All activities must be specific to the location\n      - Include specific venues, trails, or locations\n      - Consider activity intensity based on temperature\n      - Keep descriptions concise but informative\n\n      Maintain this exact formatting for consistency, using the emoji and section headers as shown.`;\n\n    const response = await agent.stream([\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ]);\n\n    let activitiesText = '';\n\n    for await (const chunk of response.textStream) {\n      process.stdout.write(chunk);\n      activitiesText += chunk;\n    }\n\n    return {\n      activities: activitiesText,\n    };\n  },\n});\n\nconst weatherWorkflow = createWorkflow({\n  id: 'weather-workflow',\n  inputSchema: z.object({\n    city: z.string().describe('The city to get the weather for'),\n  }),\n  outputSchema: z.object({\n    activities: z.string(),\n  }),\n})\n  .then(fetchWeather)\n  .then(planActivities);\n\nweatherWorkflow.commit();\n\nexport { weatherWorkflow };\n","import { createWorkflow, createStep } from '@mastra/core/workflows';\nimport { z } from 'zod';\nimport { braveMCPSearchTool } from '../tools/brave-search-wrapper';\n\n// Brave MCPを使用したWeb検索ステップ\nconst braveMCPSearchStep = createStep({\n  id: 'brave-mcp-search',\n  description: 'Brave MCPを使用してWeb検索を実行します',\n  inputSchema: z.object({\n    query: z.string(),\n    maxResults: z.number().optional().default(10),\n    language: z.string().optional().default('ja'),\n    userLocation: z.object({\n      country: z.string().optional().default('JP'),\n      city: z.string().optional().default('Tokyo'),\n      region: z.string().optional().default('Tokyo'),\n    }).optional(),\n  }),\n  outputSchema: z.object({\n    searchResults: z.array(z.object({\n      title: z.string(),\n      url: z.string(),\n      snippet: z.string(),\n      age: z.string().optional(),\n    })),\n    rawResults: z.string(),\n    searchTime: z.number(),\n    success: z.boolean(),\n  }),\n  execute: async ({ inputData, mastra, runtimeContext }) => {\n    const { query, maxResults } = inputData;\n    const startTime = Date.now();\n    \n    try {\n      console.log(`🔍 Brave MCPでWeb検索を実行: \"${query}\"`);\n      \n      // MastraツールとしてラップされたBrave MCPツールを実行\n      const result = await braveMCPSearchTool.execute({\n        context: {\n          query,\n          count: maxResults,\n        },\n        mastra,\n        runtimeContext,\n      });\n      \n      // 検索結果をパース\n      let searchResults = [];\n      const rawResults = result.searchResults;\n      \n      if (result.success) {\n        try {\n          // 結果が文字列の場合、まずJSONとしてパースを試みる\n          let parsedData = null;\n          if (typeof result.searchResults === 'string') {\n            // JSONパースを試みる\n            try {\n              parsedData = JSON.parse(result.searchResults);\n            } catch {\n              // JSONパースに失敗した場合、テキスト形式として処理\n              console.log('📝 テキスト形式の検索結果をパース中...');\n              const textResults = result.searchResults;\n              \n              // 各結果を改行で分割して処理\n              const entries = textResults.split('\\n\\n').filter((entry: string) => entry.trim());\n              \n              searchResults = entries.map((entry: string) => {\n                const lines = entry.split('\\n');\n                let title = '';\n                let description = '';\n                let url = '';\n                \n                lines.forEach((line: string) => {\n                  if (line.startsWith('Title:')) {\n                    title = line.substring(6).trim();\n                  } else if (line.startsWith('Description:')) {\n                    description = line.substring(12).trim();\n                  } else if (line.startsWith('URL:')) {\n                    url = line.substring(4).trim();\n                  }\n                });\n                \n                return {\n                  title,\n                  url,\n                  snippet: description,\n                  age: '',\n                };\n              }).filter((result: { title: string; url: string; snippet: string; age: string }) => result.title && result.url); // 有効な結果のみ保持\n              \n              console.log(`📊 テキストから${searchResults.length}件の結果を抽出`);\n            }\n          } else {\n            parsedData = result.searchResults;\n          }\n          \n          // JSONとしてパースできた場合の処理\n          if (parsedData) {\n            console.log('📊 パース後のデータ:', parsedData);\n            \n            // Brave Search APIの結果構造に対応\n            if (parsedData.web?.results) {\n              searchResults = parsedData.web.results.map((result: { title?: string; url?: string; description?: string; age?: string }) => ({\n                title: result.title || '',\n                url: result.url || '',\n                snippet: result.description || '',\n                age: result.age || '',\n              }));\n            }\n            // resultsが直接ある場合\n            else if (Array.isArray(parsedData.results)) {\n              searchResults = parsedData.results.map((result: { title?: string; url?: string; description?: string; snippet?: string; age?: string }) => ({\n                title: result.title || '',\n                url: result.url || '',\n                snippet: result.description || result.snippet || '',\n                age: result.age || '',\n              }));\n            }\n            // 配列が直接返される場合\n            else if (Array.isArray(parsedData)) {\n              searchResults = parsedData.map((result: { title?: string; url?: string; description?: string; snippet?: string; age?: string }) => ({\n                title: result.title || '',\n                url: result.url || '',\n                snippet: result.description || result.snippet || '',\n                age: result.age || '',\n              }));\n            }\n          }\n        } catch (e) {\n          console.error('検索結果のパースエラー:', e);\n          console.error('元のデータ:', result.searchResults);\n        }\n      }\n      \n      const searchTime = Date.now() - startTime;\n      \n      console.log(`✅ Brave MCP検索完了 (${searchTime}ms)`);\n      console.log(`📊 検索結果: ${searchResults.length}件`);\n      \n      // 結果が取得できなかった場合のフォールバック\n      if (!result.success || searchResults.length === 0) {\n        console.warn('⚠️ フォールバックモードで実行します');\n        const mockResults = [\n          {\n            title: `${query}に関する検索結果 1`,\n            url: `https://example.com/search?q=${encodeURIComponent(query)}`,\n            snippet: `${query}についての詳細情報です。この検索結果はフォールバックモードで生成されました。`,\n            age: '1日前',\n          },\n          {\n            title: `${query}の最新情報`,\n            url: `https://example.com/latest/${encodeURIComponent(query)}`,\n            snippet: `${query}に関する最新の情報をお届けします。`,\n            age: '2時間前',\n          },\n        ];\n        \n        return {\n          searchResults: mockResults,\n          rawResults: JSON.stringify({ web: { results: mockResults } }),\n          searchTime: Date.now() - startTime,\n          success: true,\n        };\n      }\n      \n      return {\n        searchResults,\n        rawResults,\n        searchTime,\n        success: true,\n      };\n    } catch (error) {\n      console.error('❌ Brave MCP検索エラー:', error);\n      console.error('エラーの詳細:', {\n        name: error instanceof Error ? error.name : 'Unknown',\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n      });\n      \n      const searchTime = Date.now() - startTime;\n      \n      // エラー時のフォールバック\n      const mockResults = [\n        {\n          title: `${query}に関する検索結果`,\n          url: `https://example.com/search?q=${encodeURIComponent(query)}`,\n          snippet: `${query}についての情報です。エラーが発生したため、フォールバックモードで生成されました。`,\n          age: '1日前',\n        },\n      ];\n      \n      return {\n        searchResults: mockResults,\n        rawResults: JSON.stringify({ web: { results: mockResults } }),\n        searchTime,\n        success: false,\n      };\n    }\n  },\n});\n\n// 検索結果の妥当性判断ステップ\nconst validateSearchResultsStep = createStep({\n  id: 'validate-search-results',\n  description: 'workflowAgentが検索結果の妥当性を判断します',\n  inputSchema: z.object({\n    searchResults: z.array(z.object({\n      title: z.string(),\n      url: z.string(),\n      snippet: z.string(),\n      age: z.string().optional(),\n    })),\n    rawResults: z.string(),\n    searchTime: z.number(),\n    success: z.boolean(),\n  }),\n  outputSchema: z.object({\n    isValid: z.boolean(),\n    validationScore: z.number(),\n    feedback: z.string(),\n    shouldRetry: z.boolean(),\n    refinedQuery: z.string().optional(),\n  }),\n  execute: async ({ inputData, getInitData, runtimeContext, mastra }) => {\n    const { searchResults, success } = inputData;\n    const { query } = getInitData();\n    \n    try {\n      console.log(`🧐 検索結果の妥当性を判断中...`);\n      \n      // workflowAgentを取得\n      const agent = mastra?.getAgent('workflowAgent');\n      if (!agent) {\n        throw new Error('workflowAgentが見つかりません');\n      }\n      \n      // runtimeContextからresourceIdとthreadIdを取得\n      const resourceId = runtimeContext?.get('resourceId');\n      const threadId = runtimeContext?.get('threadId');\n      \n      // 妥当性判断プロンプト\n      const validationPrompt = `以下の検索結果を評価してください：\n\n**検索クエリ**: \"${query}\"\n**検索結果数**: ${searchResults.length}件\n**検索成功**: ${success ? 'はい' : 'いいえ'}\n\n**検索結果**:\n${searchResults.map((result, index) => `\n${index + 1}. ${result.title}\n   URL: ${result.url}\n   概要: ${result.snippet}\n   ${result.age ? `更新: ${result.age}` : ''}\n`).join('\\n')}\n\n以下の観点から評価してください：\n\n1. **関連性**: 検索結果はクエリに関連していますか？\n2. **信頼性**: 情報源は信頼できますか？\n3. **完全性**: 必要な情報が十分に含まれていますか？\n4. **最新性**: 情報は最新ですか？\n\n評価結果を以下のJSON形式で返してください：\n{\n  \"validationScore\": 0-100の数値,\n  \"isValid\": true/false（60点以上でtrue）,\n  \"feedback\": \"評価の詳細説明\",\n  \"shouldRetry\": true/false（再検索が必要か）,\n  \"refinedQuery\": \"より良い検索クエリ（再検索が必要な場合のみ）\"\n}`;\n\n      const { text } = await agent.generate(\n        validationPrompt,\n        { \n          memory: resourceId && threadId ? {\n            resource: resourceId as string,\n            thread: threadId as string\n          } : undefined\n        }\n      );\n      \n      // 評価結果をパース\n      let evaluation;\n      try {\n        evaluation = JSON.parse(text);\n      } catch {\n        // JSON解析失敗時のフォールバック\n        evaluation = {\n          validationScore: searchResults.length > 0 ? 60 : 30,\n          isValid: searchResults.length > 3,\n          feedback: text,\n          shouldRetry: searchResults.length < 3,\n          refinedQuery: undefined,\n        };\n      }\n      \n      console.log(`✅ 妥当性判断完了 (スコア: ${evaluation.validationScore}/100)`);\n      \n      return {\n        isValid: evaluation.isValid || false,\n        validationScore: evaluation.validationScore || 50,\n        feedback: evaluation.feedback || '評価結果を取得できませんでした',\n        shouldRetry: evaluation.shouldRetry || false,\n        refinedQuery: evaluation.refinedQuery,\n      };\n    } catch (error) {\n      console.error('妥当性判断エラー:', error);\n      \n      // エラー時のフォールバック\n      return {\n        isValid: searchResults.length > 0,\n        validationScore: searchResults.length > 0 ? 50 : 0,\n        feedback: `妥当性判断中にエラーが発生しました: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        shouldRetry: searchResults.length === 0,\n        refinedQuery: undefined,\n      };\n    }\n  },\n});\n\n// 検索結果の分析と洞察生成ステップ\nconst analyzeSearchResultsStep = createStep({\n  id: 'analyze-search-results',\n  description: 'workflowAgentが検索結果を分析し洞察を生成します',\n  inputSchema: z.object({\n    isValid: z.boolean(),\n    validationScore: z.number(),\n    feedback: z.string(),\n    shouldRetry: z.boolean(),\n    refinedQuery: z.string().optional(),\n  }),\n  outputSchema: z.object({\n    analysis: z.string(),\n    keyInsights: z.array(z.string()),\n    recommendations: z.array(z.string()),\n    reliabilityScore: z.number(),\n  }),\n  execute: async ({ inputData, getInitData, getStepResult, runtimeContext, mastra }) => {\n    const { isValid, validationScore, feedback } = inputData;\n    const { query } = getInitData();\n    const { searchResults, searchTime } = getStepResult(braveMCPSearchStep);\n    \n    try {\n      console.log(`🧠 検索結果を分析中...`);\n      \n      // workflowAgentを取得\n      const agent = mastra?.getAgent('workflowAgent');\n      if (!agent) {\n        throw new Error('workflowAgentが見つかりません');\n      }\n      \n      // runtimeContextからresourceIdとthreadIdを取得\n      const resourceId = runtimeContext?.get('resourceId');\n      const threadId = runtimeContext?.get('threadId');\n      \n      // 分析プロンプト\n      const analysisPrompt = `以下の検索結果を詳細に分析してください：\n\n**検索クエリ**: \"${query}\"\n**検索結果数**: ${searchResults.length}件\n**妥当性スコア**: ${validationScore}/100\n**妥当性評価**: ${feedback}\n\n**検索結果**:\n${searchResults.map((result, index) => `\n${index + 1}. ${result.title}\n   URL: ${result.url}\n   概要: ${result.snippet}\n   ${result.age ? `更新: ${result.age}` : ''}\n`).join('\\n')}\n\n以下の形式で分析結果を提供してください：\n\n## 総合分析\n\n### 情報の概要\n[検索結果から得られた主要な情報の要約]\n\n### 信頼性評価\n[情報源の信頼性と情報の質の評価]\n\n### 主要な洞察\n- [重要な発見1]\n- [重要な発見2]\n- [重要な発見3]\n\n### 実用的な推奨事項\n- [具体的なアクション1]\n- [具体的なアクション2]\n- [具体的なアクション3]\n\n### 情報の制限事項\n[注意すべき点や情報の限界]\n\n### 追加調査の必要性\n[さらに調査が必要な領域]`;\n\n      const { text: analysis } = await agent.generate(\n        analysisPrompt,\n        { \n          memory: resourceId && threadId ? {\n            resource: resourceId as string,\n            thread: threadId as string\n          } : undefined\n        }\n      );\n      \n      // 主要な洞察を抽出\n      const keyInsights = [\n        `検索時間: ${searchTime}ms`,\n        `検索結果: ${searchResults.length}件`,\n        `妥当性スコア: ${validationScore}/100`,\n      ];\n      \n      // URLのドメイン多様性を計算\n      if (searchResults.length > 0) {\n        try {\n          const domains = new Set(searchResults.map(result => new URL(result.url).hostname));\n          keyInsights.push(`情報源の多様性: ${domains.size}個のドメイン`);\n        } catch {\n          keyInsights.push('情報源の多様性: 分析不可');\n        }\n      }\n      \n      // 推奨事項\n      const recommendations = [\n        isValid ? '現在の検索結果を基に行動する' : '検索クエリを改善して再検索する',\n        '複数の情報源を比較検討する',\n        '最新の情報を定期的に確認する',\n      ];\n      \n      // 信頼性スコアを計算\n      let reliabilityScore = validationScore;\n      \n      // 検索結果数によるボーナス\n      reliabilityScore += Math.min(20, searchResults.length * 2);\n      \n      // ドメイン多様性によるボーナス\n      if (searchResults.length > 0) {\n        try {\n          const domains = new Set(searchResults.map(result => new URL(result.url).hostname));\n          reliabilityScore += Math.min(10, domains.size * 2);\n        } catch {\n          // URL解析エラーの場合はボーナスなし\n        }\n      }\n      \n      // 最大100点に制限\n      reliabilityScore = Math.min(100, Math.max(0, reliabilityScore));\n      \n      console.log(`✅ 分析完了 (信頼性スコア: ${reliabilityScore}%)`);\n      \n      return {\n        analysis,\n        keyInsights,\n        recommendations,\n        reliabilityScore,\n      };\n    } catch (error) {\n      console.error('分析エラー:', error);\n      \n      // エラー時のフォールバック\n      return {\n        analysis: `分析中にエラーが発生しました: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        keyInsights: [\n          `検索結果: ${searchResults.length}件`,\n          `妥当性スコア: ${validationScore}/100`,\n          'エラーにより詳細分析は実行されませんでした',\n        ],\n        recommendations: [\n          '手動での情報確認を実施する',\n          '別の検索方法を試す',\n          '専門家に相談する',\n        ],\n        reliabilityScore: validationScore,\n      };\n    }\n  },\n});\n\n// 最終レポート生成ステップ\nconst generateWebSearchReportStep = createStep({\n  id: 'generate-web-search-report',\n  description: 'Web検索結果と分析を統合した最終レポートを生成します',\n  inputSchema: z.object({\n    analysis: z.string(),\n    keyInsights: z.array(z.string()),\n    recommendations: z.array(z.string()),\n    reliabilityScore: z.number(),\n  }),\n  outputSchema: z.object({\n    report: z.string(),\n    metadata: z.object({\n      jobId: z.string(),\n      completedAt: z.string(),\n      processingTime: z.number(),\n      searchEngine: z.string(),\n      reliabilityScore: z.number(),\n      citationCount: z.number(),\n      retryCount: z.number(),\n    }),\n  }),\n  execute: async ({ inputData, runId, getInitData, getStepResult }) => {\n    const startTime = Date.now();\n    \n    const {\n      analysis,\n      keyInsights,\n      recommendations,\n      reliabilityScore,\n    } = inputData;\n    \n    const { query } = getInitData();\n    const { searchResults, searchTime } = getStepResult(braveMCPSearchStep);\n    const { feedback, validationScore } = getStepResult(validateSearchResultsStep);\n    \n    // 引用元URLを抽出\n    const citations = searchResults.map(result => result.url);\n    \n    // 詳細レポートを生成\n    const report = `\n# 🔍 Web検索レポート\n\n## 検索クエリ\n**「${query}」**\n\n## 📊 実行サマリー\n- **検索エンジン**: Brave Search (MCP)\n- **検索時間**: ${searchTime}ms\n- **検索結果数**: ${searchResults.length}件\n- **妥当性スコア**: ${validationScore}/100\n- **信頼性スコア**: ${reliabilityScore}% ${reliabilityScore >= 80 ? '🟢' : reliabilityScore >= 60 ? '🟡' : '🔴'}\n- **再試行回数**: 0回\n\n## 🌐 検索結果\n${searchResults.map((result, index) => `\n### ${index + 1}. ${result.title}\n- **URL**: [${result.url}](${result.url})\n- **概要**: ${result.snippet}\n${result.age ? `- **更新**: ${result.age}` : ''}\n`).join('\\n')}\n\n## 🧐 妥当性評価\n${feedback}\n\n## 🧠 AI分析結果\n${analysis}\n\n## 💡 主要な洞察\n${keyInsights.map(insight => `- ${insight}`).join('\\n')}\n\n## 📋 推奨事項\n${recommendations.map(rec => `- ${rec}`).join('\\n')}\n\n## 📚 引用元・参考資料\n${citations.length > 0 \n  ? citations.map((url, index) => `${index + 1}. [${url}](${url})`).join('\\n')\n  : '引用元が見つかりませんでした。'\n}\n\n## ⚙️ 技術情報\n- **検索エンジン**: Brave Search (Model Context Protocol)\n- **検索実行時間**: ${searchTime}ms\n- **分析処理時間**: ${Date.now() - startTime}ms\n- **妥当性評価**: ${validationScore}/100\n- **信頼性評価**: ${reliabilityScore}/100\n- **レポート生成日時**: ${new Date().toLocaleString('ja-JP')}\n\n---\n*このレポートはBrave Search MCPによるWeb検索と、Claude 4 Sonnetによる分析を組み合わせて自動生成されました*\n    `.trim();\n    \n    const processingTime = Date.now() - startTime;\n    \n    console.log(`📝 Web検索レポート生成完了 (${processingTime}ms)`);\n    \n    return {\n      report,\n      metadata: {\n        jobId: runId || `search-job-${Date.now()}`,\n        completedAt: new Date().toISOString(),\n        processingTime,\n        searchEngine: 'Brave Search (MCP)',\n        reliabilityScore,\n        citationCount: citations.length,\n        retryCount: 0,\n      },\n    };\n  },\n});\n\n// Web検索ワークフロー（最大3回まで再試行）\nexport const webSearchWorkflow = createWorkflow({\n  id: 'web-search-workflow',\n  description: 'Brave MCPを使用してWeb検索と分析を行い、必要に応じて最大3回まで再検索を行う',\n  inputSchema: z.object({\n    query: z.string(),\n    maxResults: z.number().optional().default(10),\n    language: z.string().optional().default('ja'),\n    userLocation: z.object({\n      country: z.string().optional().default('JP'),\n      city: z.string().optional().default('Tokyo'),\n      region: z.string().optional().default('Tokyo'),\n    }).optional(),\n  }),\n  outputSchema: z.object({\n    report: z.string(),\n    metadata: z.object({\n      jobId: z.string(),\n      completedAt: z.string(),\n      processingTime: z.number(),\n      searchEngine: z.string(),\n      reliabilityScore: z.number(),\n      citationCount: z.number(),\n      retryCount: z.number(),\n    }),\n  }),\n})\n  .then(braveMCPSearchStep)\n  .then(validateSearchResultsStep)\n  .then(analyzeSearchResultsStep)\n  .then(generateWebSearchReportStep)\n  .commit(); ","import { createWorkflow, createStep } from '@mastra/core/workflows';\nimport { z } from 'zod';\n\n// スライド生成ステップ\nconst generateSlideStep = createStep({\n  id: 'generate-slide',\n  description: 'GPT-4oを使用してスライド用のHTMLコードを生成します',\n  inputSchema: z.object({\n    topic: z.string().describe('スライドのトピック'),\n    slideCount: z.number().optional().default(5).describe('スライドの枚数'),\n    style: z.string().optional().default('modern').describe('スライドのスタイル'),\n    language: z.string().optional().default('ja').describe('スライドの言語'),\n  }),\n  outputSchema: z.object({\n    htmlCode: z.string(),\n    generationTime: z.number(),\n    slideCount: z.number(),\n    style: z.string(),\n  }),\n  execute: async ({ inputData, runtimeContext, mastra }) => {\n    const { topic, slideCount, style, language } = inputData;\n    \n    const startTime = Date.now();\n    \n    try {\n      console.log(`🎨 スライド生成開始: \"${topic}\" (${slideCount}枚)`);\n      \n      // runtimeContextからresourceIdとthreadIdを取得\n      const resourceId = runtimeContext?.get('resourceId');\n      const threadId = runtimeContext?.get('threadId');\n      \n      console.log(`📝 コンテキスト情報: resourceId=${resourceId}, threadId=${threadId}`);\n      \n      // workflowAgentを取得\n      const agent = mastra?.getAgent('workflowAgent');\n      if (!agent) {\n        throw new Error('workflowAgentが見つかりません');\n      }\n      \n      // スライド生成プロンプト\n      const slidePrompt = language === 'ja' \n        ? `「${topic}」について${slideCount}枚のスライドを作成してください。スタイルは${style}で、日本語で作成してください。\n\n以下の要件に従って、完全なHTMLコードのみを出力してください：\n\n1. **HTML構造**: 完全に独立したHTMLファイルとして作成\n2. **スタイリング**: 内部CSSを使用してモダンで美しいデザイン\n3. **レスポンシブ**: 様々な画面サイズに対応\n4. **ナビゲーション**: キーボード（←→）とクリックでスライド切り替え\n5. **アニメーション**: 滑らかなスライド遷移効果\n6. **コンテンツ**: 各スライドに適切なタイトル、内容、視覚的要素\n\n**重要**: \n- 外部ライブラリは使用せず、純粋なHTML/CSS/JavaScriptで作成\n- CDNリンクも使用しない\n- 完全に自己完結したHTMLコードのみを出力\n- レスポンス全体がHTMLコードになるように\n\n**スライドの構成**:\n1. タイトルスライド\n2. 概要/目次\n3. メインコンテンツ（複数スライド）\n4. まとめ/結論\n5. 質疑応答/終了スライド\n\n**デザインガイドライン**:\n- ${style}スタイルを適用\n- 読みやすいフォント\n- 適切なコントラスト\n- 視覚的な階層構造\n- アイコンや図形の活用（CSS/HTMLのみで作成）`\n        : `Create ${slideCount} slides about \"${topic}\" in ${style} style. Output only complete HTML code.`;\n      \n      // エージェントを使用してスライドを生成\n      const { text: htmlCode } = await agent.generate(\n        slidePrompt,\n        { \n          memory: resourceId && threadId ? {\n            resource: resourceId as string,\n            thread: threadId as string\n          } : undefined\n        }\n      );\n      \n      // HTMLコードのクリーニング（マークダウンコードブロックの除去）\n      let cleanedHtmlCode = htmlCode.replace(/^```html\\s*\\n?/gm, '').replace(/\\n?```$/gm, '');\n      cleanedHtmlCode = cleanedHtmlCode.replace(/^```\\s*\\n?/gm, '').replace(/\\n?```$/gm, '');\n      \n      const generationTime = Date.now() - startTime;\n      \n      console.log(`✅ スライド生成完了 (${generationTime}ms)`);\n      console.log(`📄 生成されたHTMLサイズ: ${cleanedHtmlCode.length}文字`);\n      \n      return {\n        htmlCode: cleanedHtmlCode,\n        generationTime,\n        slideCount,\n        style,\n      };\n    } catch (error) {\n      console.error('スライド生成エラー:', error);\n      \n      // フォールバック: 基本的なスライドHTML\n      const fallbackHtml = `<!DOCTYPE html>\n<html lang=\"${language}\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${topic} - スライド</title>\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            margin: 0;\n            padding: 0;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            overflow: hidden;\n        }\n        .slide-container {\n            width: 100vw;\n            height: 100vh;\n            position: relative;\n        }\n        .slide {\n            width: 100%;\n            height: 100%;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            text-align: center;\n            padding: 2rem;\n            box-sizing: border-box;\n        }\n        .slide.active {\n            display: flex;\n            flex-direction: column;\n        }\n        .slide h1 {\n            font-size: 3rem;\n            margin-bottom: 1rem;\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n        }\n        .slide h2 {\n            font-size: 2.5rem;\n            margin-bottom: 1rem;\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n        }\n        .slide p {\n            font-size: 1.5rem;\n            line-height: 1.6;\n            max-width: 800px;\n            margin: 0 auto;\n        }\n        .navigation {\n            position: absolute;\n            bottom: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            display: flex;\n            gap: 10px;\n        }\n        .nav-btn {\n            background: rgba(255,255,255,0.2);\n            border: none;\n            color: white;\n            padding: 10px 20px;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 1rem;\n        }\n        .nav-btn:hover {\n            background: rgba(255,255,255,0.3);\n        }\n        .slide-counter {\n            position: absolute;\n            top: 20px;\n            right: 20px;\n            background: rgba(0,0,0,0.3);\n            padding: 10px 20px;\n            border-radius: 20px;\n            font-size: 1rem;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"slide-container\">\n        <div class=\"slide-counter\">\n            <span id=\"current-slide\">1</span> / <span id=\"total-slides\">${slideCount}</span>\n        </div>\n        \n        <div class=\"slide active\">\n            <h1>${topic}</h1>\n            <p>エラーが発生しましたが、基本的なスライドを表示しています。</p>\n        </div>\n        \n        <div class=\"slide\">\n            <h2>エラー詳細</h2>\n            <p>${error instanceof Error ? error.message : 'Unknown error'}</p>\n        </div>\n        \n        <div class=\"slide\">\n            <h2>ご了承ください</h2>\n            <p>スライド生成中にエラーが発生しました。<br>再度お試しください。</p>\n        </div>\n        \n        <div class=\"navigation\">\n            <button class=\"nav-btn\" onclick=\"previousSlide()\">← 前へ</button>\n            <button class=\"nav-btn\" onclick=\"nextSlide()\">次へ →</button>\n        </div>\n    </div>\n\n    <script>\n        let currentSlide = 0;\n        const slides = document.querySelectorAll('.slide');\n        const totalSlides = slides.length;\n        \n        document.getElementById('total-slides').textContent = totalSlides;\n        \n        function showSlide(n) {\n            slides[currentSlide].classList.remove('active');\n            currentSlide = (n + totalSlides) % totalSlides;\n            slides[currentSlide].classList.add('active');\n            document.getElementById('current-slide').textContent = currentSlide + 1;\n        }\n        \n        function nextSlide() {\n            showSlide(currentSlide + 1);\n        }\n        \n        function previousSlide() {\n            showSlide(currentSlide - 1);\n        }\n        \n        // キーボードナビゲーション\n        document.addEventListener('keydown', function(e) {\n            if (e.key === 'ArrowRight') nextSlide();\n            if (e.key === 'ArrowLeft') previousSlide();\n        });\n        \n        // クリックナビゲーション\n        document.addEventListener('click', function(e) {\n            if (e.target.closest('.nav-btn')) return;\n            if (e.clientX > window.innerWidth / 2) {\n                nextSlide();\n            } else {\n                previousSlide();\n            }\n        });\n    </script>\n</body>\n</html>`;\n      \n      const generationTime = Date.now() - startTime;\n      \n      return {\n        htmlCode: fallbackHtml,\n        generationTime,\n        slideCount,\n        style,\n      };\n    }\n  },\n});\n\n// スライド生成ワークフロー\nexport const slideGenerationWorkflow = createWorkflow({\n  id: 'slide-generation-workflow',\n  description: 'スライド用のHTMLコードを生成するワークフロー',\n  inputSchema: z.object({\n    topic: z.string().describe('スライドのトピック'),\n    slideCount: z.number().optional().default(5).describe('スライドの枚数'),\n    style: z.string().optional().default('modern').describe('スライドのスタイル'),\n    language: z.string().optional().default('ja').describe('スライドの言語'),\n  }),\n  outputSchema: z.object({\n    htmlCode: z.string(),\n    generationTime: z.number(),\n    slideCount: z.number(),\n    style: z.string(),\n  }),\n})\n  .then(generateSlideStep)\n  .commit(); ","import { Memory } from '@mastra/memory';\nimport { LibSQLStore } from '@mastra/libsql';\n\n// 共通のMemoryインスタンスを作成\nexport const sharedMemory = new Memory({\n  storage: new LibSQLStore({\n    url: ':memory:', // メモリ内ストレージを使用（開発環境用）\n  }),\n  options: {\n    lastMessages: 10, // 直近の10メッセージを保持\n    workingMemory: {\n      enabled: true,\n      template: `\n# ユーザー情報\n- 名前:\n- 好み:\n- 現在の話題:\n- 重要な情報:\n`,\n    },\n  },\n}); ","import { anthropic } from '@ai-sdk/anthropic';\nimport { Agent } from '@mastra/core/agent';\nimport { sharedMemory } from '../shared-memory';\nimport { weatherTool } from '../tools/weather-tool';\n\nexport const weatherAgent = new Agent({\n  name: 'Weather Agent',\n  instructions: `\n      You are a helpful weather assistant that provides accurate weather information and can help planning activities based on the weather.\n\n      Your primary function is to help users get weather details for specific locations. When responding:\n      - Always ask for a location if none is provided\n      - If the location name isn't in English, please translate it\n      - If giving a location with multiple parts (e.g. \"New York, NY\"), use the most relevant part (e.g. \"New York\")\n      - Include relevant details like humidity, wind conditions, and precipitation\n      - Keep responses concise but informative\n      - If the user asks for activities and provides the weather forecast, suggest activities based on the weather forecast.\n      - If the user asks for activities, respond in the format they request.\n\n      Use the weatherTool to fetch current weather data.\n`,\n  model: anthropic('claude-sonnet-4-20250514'),\n  tools: { weatherTool },\n  memory: sharedMemory,\n});\n","import { anthropic } from '@ai-sdk/anthropic';\nimport { openai } from '@ai-sdk/openai';\nimport { google } from '@ai-sdk/google';\nimport { Agent } from '@mastra/core/agent';\nimport { sharedMemory } from '../shared-memory';\nimport { weatherTool } from '../tools/weather-tool';\nimport { webSearchTool } from '../tools/web-search-tool';\nimport { slideGenerationTool } from '../tools/slide-generation-tool';\nimport { slidePreviewTool } from '../tools/slide-preview-tool';\nimport { jobStatusTool } from '../tools/job-status-tool';\nimport { jobResultTool } from '../tools/job-result-tool';\nimport { LanguageModel } from 'ai';\n\n// モデルを動的に作成する関数\nexport function createGeneralAgent(modelType: string = 'claude-sonnet-4'): Agent {\n  // モデルに応じて適切なAI SDKを選択\n  let aiModel: LanguageModel;\n  let modelInfo: { provider: string; modelId: string; displayName: string };\n  \n  switch (modelType) {\n    case 'openai-o3':\n      aiModel = openai('o3-2025-04-16');\n      modelInfo = { provider: 'OpenAI', modelId: 'o3-2025-04-16', displayName: 'OpenAI o3' };\n      break;\n    case 'gemini-2.5-flash':\n      aiModel = google('gemini-2.5-flash');\n      modelInfo = { provider: 'Google', modelId: 'gemini-2.5-flash', displayName: 'Gemini 2.5 Flash' };\n      break;\n    case 'claude-sonnet-4':\n    default:\n      aiModel = anthropic('claude-sonnet-4-20250514');\n      modelInfo = { provider: 'Anthropic', modelId: 'claude-sonnet-4-20250514', displayName: 'Claude Sonnet 4' };\n      break;\n  }\n  \n  console.log(`🤖 AIモデル設定: ${modelInfo.displayName} (${modelInfo.provider} - ${modelInfo.modelId})`);\n  \n  // モデル情報を詳細にログ出力（Mastraの内部ログを補完）\n  console.log(`[Mastra Debug] model=${modelInfo.modelId} provider=${modelInfo.provider}`);\n\n  const agent = new Agent({\n    name: 'General AI Assistant',\n    instructions: `\n    あなたは親切で知識豊富なAIアシスタントです。ユーザーの質問に対して、正確で役立つ情報を提供します。\n\n    主な機能：\n    - 一般的な質問への回答\n    - タスクの計画と管理のサポート\n    - 天気情報の提供（weatherToolを使用）\n    - Web検索の実行（webSearchToolを使用）\n    - スライド生成（slideGenerationToolを使用）\n    - スライドプレビュー（slidePreviewToolを使用）\n    - ジョブ状態の確認（jobStatusToolを使用）\n    - ワークフロー結果の取得（jobResultToolを使用）\n    - アイデアのブレインストーミング\n    - 文章の作成と編集の支援\n    - 技術的な質問への回答\n\n    対応ガイドライン：\n    - 常に丁寧で親しみやすい口調を保つ\n    - 質問が不明確な場合は、詳細を尋ねる\n    - 複雑なタスクは段階的に分解して説明する\n    - 可能な限り具体的で実用的なアドバイスを提供する\n    - ユーザーのニーズに合わせて回答の詳細度を調整する\n    - 天気に関する質問にはweatherToolを使用して最新の情報を提供する\n    - Web検索が必要な場合はwebSearchToolを使用してジョブを登録する\n    - スライド作成が必要な場合はslideGenerationToolを使用してジョブを登録する\n    - スライドのHTMLコードが生成された場合、必ずslidePreviewToolを使用してプレビューを準備する\n    - jobResultToolでslideGenerationWorkflowの結果を取得したら、即座にslidePreviewToolを実行する\n    - slidePreviewToolはプレビュー表示のトリガーなので、必ず実行する\n\n    【重要】効率的なジョブ監視プロセス：\n    - ユーザーが「結果は？」「どうなった？」など、ジョブの結果を尋ねた場合のみjobStatusToolを使用する\n    - ジョブを開始した直後は、ユーザーに「ジョブを開始しました」と報告するだけで十分\n    - ジョブの実行中は、ユーザーからの新しい質問に通常通り応答する\n    - ジョブが完了したかどうかの確認は、ユーザーが明示的に尋ねた場合のみ行う\n    - 過剰なステータスチェックは避ける（連続して複数回チェックしない）\n\n    ジョブ結果取得時の手順：\n    1. ユーザーがジョブの結果を尋ねた場合、jobStatusToolを1回だけ使用\n    2. ジョブが完了していればjobResultToolで結果を取得\n    3. **重要**: slideGenerationWorkflowの結果を取得した場合は、必ずslidePreviewToolを実行\n    4. 取得した結果をユーザーに報告\n    5. ジョブがまだ実行中の場合は、その旨を伝えて、後で確認するよう案内\n\n    注意事項：\n    - 個人情報や機密情報を要求しない\n    - 医療、法律、金融に関する専門的なアドバイスは提供しない（一般的な情報のみ）\n    - 常に事実に基づいた情報を提供し、不確かな場合はその旨を明記する\n    - Web検索ツールは即座にjobIdを返すが、実際の結果は後で取得する必要がある\n    - スライド生成ツールも即座にjobIdを返すが、実際の結果は後で取得する必要がある\n    - スライドのHTMLコードが生成された場合、必ずslidePreviewToolを実行してプレビューを準備する\n    - jobResultToolでworkflowIdが'slideGenerationWorkflow'の結果を取得した場合、必ずその直後にslidePreviewToolを実行する\n    - slidePreviewToolはプレビュー表示のトリガーとして機能するため、スライド生成結果を取得したら必ず実行する\n    `,\n    model: aiModel,\n    tools: { weatherTool, webSearchTool, slideGenerationTool, slidePreviewTool, jobStatusTool, jobResultTool },\n    memory: sharedMemory,\n  });\n  \n  // エージェントにモデル情報を附加（ログ用）\n  (agent as { _modelInfo?: { provider: string; modelId: string; displayName: string } })._modelInfo = modelInfo;\n  \n  return agent;\n}\n\n// 互換性のためにデフォルトエクスポートを保持\nexport const generalAgent = createGeneralAgent();","import { anthropic } from '@ai-sdk/anthropic';\nimport { Agent } from '@mastra/core/agent';\nimport { sharedMemory } from '../shared-memory';\n\nexport const workflowAgent = new Agent({\n  name: 'Workflow AI Agent',\n  instructions: `\n    あなたはワークフロー内で動作する専門的なAIエージェントです。\n    ユーザーの会話履歴とコンテキストを考慮して、適切な応答を生成します。\n\n    主な役割：\n    - Web検索結果の分析と洞察の生成\n    - スライドコンテンツの生成\n    - 情報の要約と構造化\n    - データの分析と評価\n\n    重要な指示：\n    - 常に正確で信頼性の高い情報を提供する\n    - ユーザーの会話履歴とコンテキストを活用する\n    - 構造化された出力を心がける\n    - 必要に応じて詳細な分析を提供する\n  `,\n  model: anthropic('claude-sonnet-4-20250514'),\n  tools: {}, // ワークフロー内では追加のツールは不要\n  memory: sharedMemory,\n}); ","\nimport { Mastra } from '@mastra/core/mastra';\nimport { PinoLogger } from '@mastra/loggers';\nimport { LibSQLStore } from '@mastra/libsql';\nimport { weatherWorkflow } from './workflows/weather-workflow';\nimport { webSearchWorkflow } from './workflows/web-search-workflow-mcp';\nimport { slideGenerationWorkflow } from './workflows/slide-generation-workflow';\nimport { weatherAgent } from './agents/weather-agent';\nimport { generalAgent } from './agents/general-agent';\nimport { workflowAgent } from './agents/workflow-agent';\n\nexport const mastra = new Mastra({\n  workflows: { \n    weatherWorkflow,\n    webSearchWorkflow,\n    slideGenerationWorkflow,\n  },\n  agents: { \n    weatherAgent, \n    generalAgent,\n    workflowAgent,\n  },\n  storage: new LibSQLStore({\n    // stores telemetry, evals, ... into memory storage, if it needs to persist, change to file:../mastra.db\n    url: \":memory:\",\n  }),\n  logger: new PinoLogger({\n    name: 'Mastra',\n    level: (process.env.LOG_LEVEL || 'debug') as 'debug' | 'info' | 'warn' | 'error',  // デバッグレベルに変更してLLM呼び出しのモデル名を記録\n  }),\n});\n\n// エージェントをエクスポート\nexport { generalAgent, workflowAgent };\n"],"names":["result"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAGA,MAAM,cAAA,GAAiB,EAAE,MAAA,CAAO;AAAA,EAC9B,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,EACf,OAAA,EAAS,EAAE,MAAA,EAAO;AAAA,EAClB,OAAA,EAAS,EAAE,MAAA,EAAO;AAAA,EAClB,mBAAA,EAAqB,EAAE,MAAA,EAAO;AAAA,EAC9B,SAAA,EAAW,EAAE,MAAA,EAAO;AAAA,EACpB,QAAA,EAAU,EAAE,MAAA;AACd,CAAC,CAAA;AAED,SAAS,oBAAoB,IAAA,EAAsB;AACjD,EAAA,MAAM,UAAA,GAAqC;AAAA,IACzC,CAAA,EAAG,WAAA;AAAA,IACH,CAAA,EAAG,cAAA;AAAA,IACH,CAAA,EAAG,eAAA;AAAA,IACH,CAAA,EAAG,UAAA;AAAA,IACH,EAAA,EAAI,OAAA;AAAA,IACJ,EAAA,EAAI,qBAAA;AAAA,IACJ,EAAA,EAAI,eAAA;AAAA,IACJ,EAAA,EAAI,kBAAA;AAAA,IACJ,EAAA,EAAI,eAAA;AAAA,IACJ,EAAA,EAAI,aAAA;AAAA,IACJ,EAAA,EAAI,eAAA;AAAA,IACJ,EAAA,EAAI,YAAA;AAAA,IACJ,EAAA,EAAI,kBAAA;AAAA,IACJ,EAAA,EAAI,oBAAA;AAAA,IACJ,EAAA,EAAI,iBAAA;AAAA,IACJ,EAAA,EAAI;AAAA,GACN;AACA,EAAA,OAAO,UAAA,CAAW,IAAI,CAAA,IAAK,SAAA;AAC7B;AAEA,MAAM,eAAe,UAAA,CAAW;AAAA,EAC9B,EAAA,EAAI,eAAA;AAAA,EACJ,WAAA,EAAa,2CAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,IAAA,EAAM,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,iCAAiC;AAAA,GAC5D,CAAA;AAAA,EACD,YAAA,EAAc,cAAA;AAAA,EACd,OAAA,EAAS,OAAO,EAAE,SAAA,EAAU,KAAM;AAChC,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,MAAM,sBAAsB,CAAA;AAAA,IACxC;AAEA,IAAA,MAAM,YAAA,GAAe,CAAA,oDAAA,EAAuD,kBAAA,CAAmB,SAAA,CAAU,IAAI,CAAC,CAAA,QAAA,CAAA;AAC9G,IAAA,MAAM,iBAAA,GAAoB,MAAM,KAAA,CAAM,YAAY,CAAA;AAClD,IAAA,MAAM,aAAA,GAAiB,MAAM,iBAAA,CAAkB,IAAA,EAAK;AAIpD,IAAA,IAAI,CAAC,aAAA,CAAc,OAAA,GAAU,CAAC,CAAA,EAAG;AAC/B,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,UAAA,EAAa,SAAA,CAAU,IAAI,CAAA,WAAA,CAAa,CAAA;AAAA,IAC1D;AAEA,IAAA,MAAM,EAAE,QAAA,EAAU,SAAA,EAAW,MAAK,GAAI,aAAA,CAAc,QAAQ,CAAC,CAAA;AAE7D,IAAA,MAAM,UAAA,GAAa,CAAA,gDAAA,EAAmD,QAAQ,CAAA,WAAA,EAAc,SAAS,CAAA,iGAAA,CAAA;AACrG,IAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,UAAU,CAAA;AACvC,IAAA,MAAM,IAAA,GAAQ,MAAM,QAAA,CAAS,IAAA,EAAK;AAYlC,IAAA,MAAM,QAAA,GAAW;AAAA,MACf,IAAA,EAAA,iBAAM,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AAAA,MAC7B,SAAS,IAAA,CAAK,GAAA,CAAI,GAAG,IAAA,CAAK,OAAO,cAAc,CAAA;AAAA,MAC/C,SAAS,IAAA,CAAK,GAAA,CAAI,GAAG,IAAA,CAAK,OAAO,cAAc,CAAA;AAAA,MAC/C,SAAA,EAAW,mBAAA,CAAoB,IAAA,CAAK,OAAA,CAAQ,WAAW,CAAA;AAAA,MACvD,mBAAA,EAAqB,IAAA,CAAK,MAAA,CAAO,yBAAA,CAA0B,MAAA;AAAA,QACzD,CAAC,GAAA,EAAK,IAAA,KAAS,IAAA,CAAK,GAAA,CAAI,KAAK,IAAI,CAAA;AAAA,QACjC;AAAA,OACF;AAAA,MACA,QAAA,EAAU;AAAA,KACZ;AAEA,IAAA,OAAO,QAAA;AAAA,EACT;AACF,CAAC,CAAA;AAED,MAAM,iBAAiB,UAAA,CAAW;AAAA,EAChC,EAAA,EAAI,iBAAA;AAAA,EACJ,WAAA,EAAa,iDAAA;AAAA,EACb,WAAA,EAAa,cAAA;AAAA,EACb,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,UAAA,EAAY,EAAE,MAAA;AAAO,GACtB,CAAA;AAAA,EACD,OAAA,EAAS,OAAO,EAAE,SAAA,EAAW,QAAO,KAAM;AACxC,IAAA,MAAM,QAAA,GAAW,SAAA;AAEjB,IAAA,IAAI,CAAC,QAAA,EAAU;AACb,MAAA,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAAA,IAC3C;AAEA,IAAA,MAAM,KAAA,GAAQ,MAAA,EAAQ,QAAA,CAAS,cAAc,CAAA;AAC7C,IAAA,IAAI,CAAC,KAAA,EAAO;AACV,MAAA,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAAA,IAC3C;AAEA,IAAA,MAAM,MAAA,GAAS,CAAA,4CAAA,EAA+C,QAAA,CAAS,QAAQ,CAAA;AAAA,MAAA,EAC3E,IAAA,CAAK,SAAA,CAAU,QAAA,EAAU,IAAA,EAAM,CAAC,CAAC;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,mGAAA,CAAA;AAyCrC,IAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,MAAA,CAAO;AAAA,MAClC;AAAA,QACE,IAAA,EAAM,MAAA;AAAA,QACN,OAAA,EAAS;AAAA;AACX,KACD,CAAA;AAED,IAAA,IAAI,cAAA,GAAiB,EAAA;AAErB,IAAA,WAAA,MAAiB,KAAA,IAAS,SAAS,UAAA,EAAY;AAC7C,MAAA,OAAA,CAAQ,MAAA,CAAO,MAAM,KAAK,CAAA;AAC1B,MAAA,cAAA,IAAkB,KAAA;AAAA,IACpB;AAEA,IAAA,OAAO;AAAA,MACL,UAAA,EAAY;AAAA,KACd;AAAA,EACF;AACF,CAAC,CAAA;AAED,MAAM,kBAAkB,cAAA,CAAe;AAAA,EACrC,EAAA,EAAI,kBAAA;AAAA,EACJ,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,IAAA,EAAM,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,iCAAiC;AAAA,GAC5D,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,UAAA,EAAY,EAAE,MAAA;AAAO,GACtB;AACH,CAAC,CAAA,CACE,IAAA,CAAK,YAAY,CAAA,CACjB,KAAK,cAAc,CAAA;AAEtB,eAAA,CAAgB,MAAA,EAAO;;AChLvB,MAAM,qBAAqB,UAAA,CAAW;AAAA,EACpC,EAAA,EAAI,kBAAA;AAAA,EACJ,WAAA,EAAa,4FAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,KAAA,EAAO,EAAE,MAAA,EAAO;AAAA,IAChB,YAAY,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,QAAQ,EAAE,CAAA;AAAA,IAC5C,UAAU,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,QAAQ,IAAI,CAAA;AAAA,IAC5C,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,MACrB,SAAS,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,QAAQ,IAAI,CAAA;AAAA,MAC3C,MAAM,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,QAAQ,OAAO,CAAA;AAAA,MAC3C,QAAQ,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,QAAQ,OAAO;AAAA,KAC9C,EAAE,QAAA;AAAS,GACb,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,aAAA,EAAe,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MAC9B,KAAA,EAAO,EAAE,MAAA,EAAO;AAAA,MAChB,GAAA,EAAK,EAAE,MAAA,EAAO;AAAA,MACd,OAAA,EAAS,EAAE,MAAA,EAAO;AAAA,MAClB,GAAA,EAAK,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA;AAAS,KAC1B,CAAC,CAAA;AAAA,IACF,UAAA,EAAY,EAAE,MAAA,EAAO;AAAA,IACrB,UAAA,EAAY,EAAE,MAAA,EAAO;AAAA,IACrB,OAAA,EAAS,EAAE,OAAA;AAAQ,GACpB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,SAAA,EAAW,MAAA,EAAQ,gBAAe,KAAM;AACxD,IAAA,MAAM,EAAE,KAAA,EAAO,UAAA,EAAW,GAAI,SAAA;AAC9B,IAAA,MAAM,SAAA,GAAY,KAAK,GAAA,EAAI;AAE3B,IAAA,IAAI;AACF,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,6DAAA,EAA2B,KAAK,CAAA,CAAA,CAAG,CAAA;AAG/C,MAAA,MAAM,MAAA,GAAS,MAAM,kBAAA,CAAmB,OAAA,CAAQ;AAAA,QAC9C,OAAA,EAAS;AAAA,UACP,KAAA;AAAA,UACA,KAAA,EAAO;AAAA,SACT;AAAA,QACA,MAAA;AAAA,QACA;AAAA,OACD,CAAA;AAGD,MAAA,IAAI,gBAAgB,EAAC;AACrB,MAAA,MAAM,aAAa,MAAA,CAAO,aAAA;AAE1B,MAAA,IAAI,OAAO,OAAA,EAAS;AAClB,QAAA,IAAI;AAEF,UAAA,IAAI,UAAA,GAAa,IAAA;AACjB,UAAA,IAAI,OAAO,MAAA,CAAO,aAAA,KAAkB,QAAA,EAAU;AAE5C,YAAA,IAAI;AACF,cAAA,UAAA,GAAa,IAAA,CAAK,KAAA,CAAM,MAAA,CAAO,aAAa,CAAA;AAAA,YAC9C,CAAA,CAAA,MAAQ;AAEN,cAAA,OAAA,CAAQ,IAAI,+GAAwB,CAAA;AACpC,cAAA,MAAM,cAAc,MAAA,CAAO,aAAA;AAG3B,cAAA,MAAM,OAAA,GAAU,WAAA,CAAY,KAAA,CAAM,MAAM,CAAA,CAAE,OAAO,CAAC,KAAA,KAAkB,KAAA,CAAM,IAAA,EAAM,CAAA;AAEhF,cAAA,aAAA,GAAgB,OAAA,CAAQ,GAAA,CAAI,CAAC,KAAA,KAAkB;AAC7C,gBAAA,MAAM,KAAA,GAAQ,KAAA,CAAM,KAAA,CAAM,IAAI,CAAA;AAC9B,gBAAA,IAAI,KAAA,GAAQ,EAAA;AACZ,gBAAA,IAAI,WAAA,GAAc,EAAA;AAClB,gBAAA,IAAI,GAAA,GAAM,EAAA;AAEV,gBAAA,KAAA,CAAM,OAAA,CAAQ,CAAC,IAAA,KAAiB;AAC9B,kBAAA,IAAI,IAAA,CAAK,UAAA,CAAW,QAAQ,CAAA,EAAG;AAC7B,oBAAA,KAAA,GAAQ,IAAA,CAAK,SAAA,CAAU,CAAC,CAAA,CAAE,IAAA,EAAK;AAAA,kBACjC,CAAA,MAAA,IAAW,IAAA,CAAK,UAAA,CAAW,cAAc,CAAA,EAAG;AAC1C,oBAAA,WAAA,GAAc,IAAA,CAAK,SAAA,CAAU,EAAE,CAAA,CAAE,IAAA,EAAK;AAAA,kBACxC,CAAA,MAAA,IAAW,IAAA,CAAK,UAAA,CAAW,MAAM,CAAA,EAAG;AAClC,oBAAA,GAAA,GAAM,IAAA,CAAK,SAAA,CAAU,CAAC,CAAA,CAAE,IAAA,EAAK;AAAA,kBAC/B;AAAA,gBACF,CAAC,CAAA;AAED,gBAAA,OAAO;AAAA,kBACL,KAAA;AAAA,kBACA,GAAA;AAAA,kBACA,OAAA,EAAS,WAAA;AAAA,kBACT,GAAA,EAAK;AAAA,iBACP;AAAA,cACF,CAAC,EAAE,MAAA,CAAO,CAACA,YAAyEA,OAAAA,CAAO,KAAA,IAASA,QAAO,GAAG,CAAA;AAE9G,cAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,8CAAA,EAAY,aAAA,CAAc,MAAM,CAAA,0CAAA,CAAS,CAAA;AAAA,YACvD;AAAA,UACF,CAAA,MAAO;AACL,YAAA,UAAA,GAAa,MAAA,CAAO,aAAA;AAAA,UACtB;AAGA,UAAA,IAAI,UAAA,EAAY;AACd,YAAA,OAAA,CAAQ,GAAA,CAAI,+DAAgB,UAAU,CAAA;AAGtC,YAAA,IAAI,UAAA,CAAW,KAAK,OAAA,EAAS;AAC3B,cAAA,aAAA,GAAgB,UAAA,CAAW,GAAA,CAAI,OAAA,CAAQ,GAAA,CAAI,CAACA,OAAAA,MAAkF;AAAA,gBAC5H,KAAA,EAAOA,QAAO,KAAA,IAAS,EAAA;AAAA,gBACvB,GAAA,EAAKA,QAAO,GAAA,IAAO,EAAA;AAAA,gBACnB,OAAA,EAASA,QAAO,WAAA,IAAe,EAAA;AAAA,gBAC/B,GAAA,EAAKA,QAAO,GAAA,IAAO;AAAA,eACrB,CAAE,CAAA;AAAA,YACJ,CAAA,MAAA,IAES,KAAA,CAAM,OAAA,CAAQ,UAAA,CAAW,OAAO,CAAA,EAAG;AAC1C,cAAA,aAAA,GAAgB,UAAA,CAAW,OAAA,CAAQ,GAAA,CAAI,CAACA,OAAAA,MAAoG;AAAA,gBAC1I,KAAA,EAAOA,QAAO,KAAA,IAAS,EAAA;AAAA,gBACvB,GAAA,EAAKA,QAAO,GAAA,IAAO,EAAA;AAAA,gBACnB,OAAA,EAASA,OAAAA,CAAO,WAAA,IAAeA,OAAAA,CAAO,OAAA,IAAW,EAAA;AAAA,gBACjD,GAAA,EAAKA,QAAO,GAAA,IAAO;AAAA,eACrB,CAAE,CAAA;AAAA,YACJ,CAAA,MAAA,IAES,KAAA,CAAM,OAAA,CAAQ,UAAU,CAAA,EAAG;AAClC,cAAA,aAAA,GAAgB,UAAA,CAAW,GAAA,CAAI,CAACA,OAAAA,MAAoG;AAAA,gBAClI,KAAA,EAAOA,QAAO,KAAA,IAAS,EAAA;AAAA,gBACvB,GAAA,EAAKA,QAAO,GAAA,IAAO,EAAA;AAAA,gBACnB,OAAA,EAASA,OAAAA,CAAO,WAAA,IAAeA,OAAAA,CAAO,OAAA,IAAW,EAAA;AAAA,gBACjD,GAAA,EAAKA,QAAO,GAAA,IAAO;AAAA,eACrB,CAAE,CAAA;AAAA,YACJ;AAAA,UACF;AAAA,QACF,SAAS,CAAA,EAAG;AACV,UAAA,OAAA,CAAQ,KAAA,CAAM,uEAAgB,CAAC,CAAA;AAC/B,UAAA,OAAA,CAAQ,KAAA,CAAM,iCAAA,EAAU,MAAA,CAAO,aAAa,CAAA;AAAA,QAC9C;AAAA,MACF;AAEA,MAAA,MAAM,UAAA,GAAa,IAAA,CAAK,GAAA,EAAI,GAAI,SAAA;AAEhC,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,0CAAA,EAAoB,UAAU,CAAA,GAAA,CAAK,CAAA;AAC/C,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,oCAAA,EAAY,aAAA,CAAc,MAAM,CAAA,MAAA,CAAG,CAAA;AAG/C,MAAA,IAAI,CAAC,MAAA,CAAO,OAAA,IAAW,aAAA,CAAc,WAAW,CAAA,EAAG;AACjD,QAAA,OAAA,CAAQ,KAAK,+GAAqB,CAAA;AAClC,QAAA,MAAM,WAAA,GAAc;AAAA,UAClB;AAAA,YACE,KAAA,EAAO,GAAG,KAAK,CAAA,kDAAA,CAAA;AAAA,YACf,GAAA,EAAK,CAAA,6BAAA,EAAgC,kBAAA,CAAmB,KAAK,CAAC,CAAA,CAAA;AAAA,YAC9D,OAAA,EAAS,GAAG,KAAK,CAAA,oOAAA,CAAA;AAAA,YACjB,GAAA,EAAK;AAAA,WACP;AAAA,UACA;AAAA,YACE,KAAA,EAAO,GAAG,KAAK,CAAA,8BAAA,CAAA;AAAA,YACf,GAAA,EAAK,CAAA,2BAAA,EAA8B,kBAAA,CAAmB,KAAK,CAAC,CAAA,CAAA;AAAA,YAC5D,OAAA,EAAS,GAAG,KAAK,CAAA,sGAAA,CAAA;AAAA,YACjB,GAAA,EAAK;AAAA;AACP,SACF;AAEA,QAAA,OAAO;AAAA,UACL,aAAA,EAAe,WAAA;AAAA,UACf,UAAA,EAAY,KAAK,SAAA,CAAU,EAAE,KAAK,EAAE,OAAA,EAAS,WAAA,EAAY,EAAG,CAAA;AAAA,UAC5D,UAAA,EAAY,IAAA,CAAK,GAAA,EAAI,GAAI,SAAA;AAAA,UACzB,OAAA,EAAS;AAAA,SACX;AAAA,MACF;AAEA,MAAA,OAAO;AAAA,QACL,aAAA;AAAA,QACA,UAAA;AAAA,QACA,UAAA;AAAA,QACA,OAAA,EAAS;AAAA,OACX;AAAA,IACF,SAAS,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,mDAAqB,KAAK,CAAA;AACxC,MAAA,OAAA,CAAQ,MAAM,uCAAA,EAAW;AAAA,QACvB,IAAA,EAAM,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,IAAA,GAAO,SAAA;AAAA,QAC5C,SAAS,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,OAAO,KAAK,CAAA;AAAA,QAC9D,KAAA,EAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,KAAA,GAAQ;AAAA,OAC/C,CAAA;AAED,MAAA,MAAM,UAAA,GAAa,IAAA,CAAK,GAAA,EAAI,GAAI,SAAA;AAGhC,MAAA,MAAM,WAAA,GAAc;AAAA,QAClB;AAAA,UACE,KAAA,EAAO,GAAG,KAAK,CAAA,gDAAA,CAAA;AAAA,UACf,GAAA,EAAK,CAAA,6BAAA,EAAgC,kBAAA,CAAmB,KAAK,CAAC,CAAA,CAAA;AAAA,UAC9D,OAAA,EAAS,GAAG,KAAK,CAAA,gPAAA,CAAA;AAAA,UACjB,GAAA,EAAK;AAAA;AACP,OACF;AAEA,MAAA,OAAO;AAAA,QACL,aAAA,EAAe,WAAA;AAAA,QACf,UAAA,EAAY,KAAK,SAAA,CAAU,EAAE,KAAK,EAAE,OAAA,EAAS,WAAA,EAAY,EAAG,CAAA;AAAA,QAC5D,UAAA;AAAA,QACA,OAAA,EAAS;AAAA,OACX;AAAA,IACF;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,4BAA4B,UAAA,CAAW;AAAA,EAC3C,EAAA,EAAI,yBAAA;AAAA,EACJ,WAAA,EAAa,yGAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,aAAA,EAAe,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MAC9B,KAAA,EAAO,EAAE,MAAA,EAAO;AAAA,MAChB,GAAA,EAAK,EAAE,MAAA,EAAO;AAAA,MACd,OAAA,EAAS,EAAE,MAAA,EAAO;AAAA,MAClB,GAAA,EAAK,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA;AAAS,KAC1B,CAAC,CAAA;AAAA,IACF,UAAA,EAAY,EAAE,MAAA,EAAO;AAAA,IACrB,UAAA,EAAY,EAAE,MAAA,EAAO;AAAA,IACrB,OAAA,EAAS,EAAE,OAAA;AAAQ,GACpB,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,OAAA,EAAS,EAAE,OAAA,EAAQ;AAAA,IACnB,eAAA,EAAiB,EAAE,MAAA,EAAO;AAAA,IAC1B,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,IACnB,WAAA,EAAa,EAAE,OAAA,EAAQ;AAAA,IACvB,YAAA,EAAc,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA;AAAS,GACnC,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,WAAW,WAAA,EAAa,cAAA,EAAgB,QAAO,KAAM;AACrE,IAAA,MAAM,EAAE,aAAA,EAAe,OAAA,EAAQ,GAAI,SAAA;AACnC,IAAA,MAAM,EAAE,KAAA,EAAM,GAAI,WAAA,EAAY;AAE9B,IAAA,IAAI;AACF,MAAA,OAAA,CAAQ,IAAI,CAAA,qFAAA,CAAoB,CAAA;AAGhC,MAAA,MAAM,KAAA,GAAQ,MAAA,EAAQ,QAAA,CAAS,eAAe,CAAA;AAC9C,MAAA,IAAI,CAAC,KAAA,EAAO;AACV,QAAA,MAAM,IAAI,MAAM,+DAAuB,CAAA;AAAA,MACzC;AAGA,MAAA,MAAM,UAAA,GAAa,cAAA,EAAgB,GAAA,CAAI,YAAY,CAAA;AACnD,MAAA,MAAM,QAAA,GAAW,cAAA,EAAgB,GAAA,CAAI,UAAU,CAAA;AAG/C,MAAA,MAAM,gBAAA,GAAmB,CAAA;;AAAA,qCAAA,EAEjB,KAAK,CAAA;AAAA,oCAAA,EACN,cAAc,MAAM,CAAA;AAAA,8BAAA,EACrB,OAAA,GAAU,iBAAO,oBAAK;;AAAA;AAAA,EAGhC,aAAA,CAAc,GAAA,CAAI,CAAC,MAAA,EAAQ,KAAA,KAAU;AAAA,EACrC,KAAA,GAAQ,CAAC,CAAA,EAAA,EAAK,MAAA,CAAO,KAAK;AAAA,QAAA,EAClB,OAAO,GAAG;AAAA,iBAAA,EACX,OAAO,OAAO;AAAA,GAAA,EAClB,OAAO,GAAA,GAAM,CAAA,cAAA,EAAO,MAAA,CAAO,GAAG,KAAK,EAAE;AAAA,CACzC,CAAA,CAAE,IAAA,CAAK,IAAI,CAAC;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA,CAAA;AAkBP,MAAA,MAAM,EAAE,IAAA,EAAK,GAAI,MAAM,KAAA,CAAM,QAAA;AAAA,QAC3B,gBAAA;AAAA,QACA;AAAA,UACE,MAAA,EAAQ,cAAc,QAAA,GAAW;AAAA,YAC/B,QAAA,EAAU,UAAA;AAAA,YACV,MAAA,EAAQ;AAAA,WACV,GAAI;AAAA;AACN,OACF;AAGA,MAAA,IAAI,UAAA;AACJ,MAAA,IAAI;AACF,QAAA,UAAA,GAAa,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA,MAC9B,CAAA,CAAA,MAAQ;AAEN,QAAA,UAAA,GAAa;AAAA,UACX,eAAA,EAAiB,aAAA,CAAc,MAAA,GAAS,CAAA,GAAI,EAAA,GAAK,EAAA;AAAA,UACjD,OAAA,EAAS,cAAc,MAAA,GAAS,CAAA;AAAA,UAChC,QAAA,EAAU,IAAA;AAAA,UACV,WAAA,EAAa,cAAc,MAAA,GAAS,CAAA;AAAA,UACpC,YAAA,EAAc;AAAA,SAChB;AAAA,MACF;AAEA,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,uEAAA,EAAmB,UAAA,CAAW,eAAe,CAAA,KAAA,CAAO,CAAA;AAEhE,MAAA,OAAO;AAAA,QACL,OAAA,EAAS,WAAW,OAAA,IAAW,KAAA;AAAA,QAC/B,eAAA,EAAiB,WAAW,eAAA,IAAmB,EAAA;AAAA,QAC/C,QAAA,EAAU,WAAW,QAAA,IAAY,4FAAA;AAAA,QACjC,WAAA,EAAa,WAAW,WAAA,IAAe,KAAA;AAAA,QACvC,cAAc,UAAA,CAAW;AAAA,OAC3B;AAAA,IACF,SAAS,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,qDAAa,KAAK,CAAA;AAGhC,MAAA,OAAO;AAAA,QACL,OAAA,EAAS,cAAc,MAAA,GAAS,CAAA;AAAA,QAChC,eAAA,EAAiB,aAAA,CAAc,MAAA,GAAS,CAAA,GAAI,EAAA,GAAK,CAAA;AAAA,QACjD,UAAU,CAAA,wGAAA,EAAsB,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,UAAU,eAAe,CAAA,CAAA;AAAA,QACxF,WAAA,EAAa,cAAc,MAAA,KAAW,CAAA;AAAA,QACtC,YAAA,EAAc;AAAA,OAChB;AAAA,IACF;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,2BAA2B,UAAA,CAAW;AAAA,EAC1C,EAAA,EAAI,wBAAA;AAAA,EACJ,WAAA,EAAa,qHAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,OAAA,EAAS,EAAE,OAAA,EAAQ;AAAA,IACnB,eAAA,EAAiB,EAAE,MAAA,EAAO;AAAA,IAC1B,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,IACnB,WAAA,EAAa,EAAE,OAAA,EAAQ;AAAA,IACvB,YAAA,EAAc,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA;AAAS,GACnC,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,IACnB,WAAA,EAAa,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IAC/B,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IACnC,gBAAA,EAAkB,EAAE,MAAA;AAAO,GAC5B,CAAA;AAAA,EACD,OAAA,EAAS,OAAO,EAAE,SAAA,EAAW,aAAa,aAAA,EAAe,cAAA,EAAgB,QAAO,KAAM;AACpF,IAAA,MAAM,EAAE,OAAA,EAAS,eAAA,EAAiB,QAAA,EAAS,GAAI,SAAA;AAC/C,IAAA,MAAM,EAAE,KAAA,EAAM,GAAI,WAAA,EAAY;AAC9B,IAAA,MAAM,EAAE,aAAA,EAAe,UAAA,EAAW,GAAI,cAAc,kBAAkB,CAAA;AAEtE,IAAA,IAAI;AACF,MAAA,OAAA,CAAQ,IAAI,CAAA,6DAAA,CAAgB,CAAA;AAG5B,MAAA,MAAM,KAAA,GAAQ,MAAA,EAAQ,QAAA,CAAS,eAAe,CAAA;AAC9C,MAAA,IAAI,CAAC,KAAA,EAAO;AACV,QAAA,MAAM,IAAI,MAAM,+DAAuB,CAAA;AAAA,MACzC;AAGA,MAAA,MAAM,UAAA,GAAa,cAAA,EAAgB,GAAA,CAAI,YAAY,CAAA;AACnD,MAAA,MAAM,QAAA,GAAW,cAAA,EAAgB,GAAA,CAAI,UAAU,CAAA;AAG/C,MAAA,MAAM,cAAA,GAAiB,CAAA;;AAAA,qCAAA,EAEf,KAAK,CAAA;AAAA,oCAAA,EACN,cAAc,MAAM,CAAA;AAAA,0CAAA,EACnB,eAAe,CAAA;AAAA,oCAAA,EAChB,QAAQ;;AAAA;AAAA,EAGnB,aAAA,CAAc,GAAA,CAAI,CAAC,MAAA,EAAQ,KAAA,KAAU;AAAA,EACrC,KAAA,GAAQ,CAAC,CAAA,EAAA,EAAK,MAAA,CAAO,KAAK;AAAA,QAAA,EAClB,OAAO,GAAG;AAAA,iBAAA,EACX,OAAO,OAAO;AAAA,GAAA,EAClB,OAAO,GAAA,GAAM,CAAA,cAAA,EAAO,MAAA,CAAO,GAAG,KAAK,EAAE;AAAA,CACzC,CAAA,CAAE,IAAA,CAAK,IAAI,CAAC;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,oEAAA,CAAA;AA4BP,MAAA,MAAM,EAAE,IAAA,EAAM,QAAA,EAAS,GAAI,MAAM,KAAA,CAAM,QAAA;AAAA,QACrC,cAAA;AAAA,QACA;AAAA,UACE,MAAA,EAAQ,cAAc,QAAA,GAAW;AAAA,YAC/B,QAAA,EAAU,UAAA;AAAA,YACV,MAAA,EAAQ;AAAA,WACV,GAAI;AAAA;AACN,OACF;AAGA,MAAA,MAAM,WAAA,GAAc;AAAA,QAClB,6BAAS,UAAU,CAAA,EAAA,CAAA;AAAA,QACnB,CAAA,0BAAA,EAAS,cAAc,MAAM,CAAA,MAAA,CAAA;AAAA,QAC7B,yCAAW,eAAe,CAAA,IAAA;AAAA,OAC5B;AAGA,MAAA,IAAI,aAAA,CAAc,SAAS,CAAA,EAAG;AAC5B,QAAA,IAAI;AACF,UAAA,MAAM,OAAA,GAAU,IAAI,GAAA,CAAI,aAAA,CAAc,GAAA,CAAI,CAAA,MAAA,KAAU,IAAI,GAAA,CAAI,MAAA,CAAO,GAAG,CAAA,CAAE,QAAQ,CAAC,CAAA;AACjF,UAAA,WAAA,CAAY,IAAA,CAAK,CAAA,4CAAA,EAAY,OAAA,CAAQ,IAAI,CAAA,oCAAA,CAAQ,CAAA;AAAA,QACnD,CAAA,CAAA,MAAQ;AACN,UAAA,WAAA,CAAY,KAAK,sEAAe,CAAA;AAAA,QAClC;AAAA,MACF;AAGA,MAAA,MAAM,eAAA,GAAkB;AAAA,QACtB,UAAU,sFAAA,GAAmB,4FAAA;AAAA,QAC7B,gFAAA;AAAA,QACA;AAAA,OACF;AAGA,MAAA,IAAI,gBAAA,GAAmB,eAAA;AAGvB,MAAA,gBAAA,IAAoB,IAAA,CAAK,GAAA,CAAI,EAAA,EAAI,aAAA,CAAc,SAAS,CAAC,CAAA;AAGzD,MAAA,IAAI,aAAA,CAAc,SAAS,CAAA,EAAG;AAC5B,QAAA,IAAI;AACF,UAAA,MAAM,OAAA,GAAU,IAAI,GAAA,CAAI,aAAA,CAAc,GAAA,CAAI,CAAA,MAAA,KAAU,IAAI,GAAA,CAAI,MAAA,CAAO,GAAG,CAAA,CAAE,QAAQ,CAAC,CAAA;AACjF,UAAA,gBAAA,IAAoB,IAAA,CAAK,GAAA,CAAI,EAAA,EAAI,OAAA,CAAQ,OAAO,CAAC,CAAA;AAAA,QACnD,CAAA,CAAA,MAAQ;AAAA,QAER;AAAA,MACF;AAGA,MAAA,gBAAA,GAAmB,KAAK,GAAA,CAAI,GAAA,EAAK,KAAK,GAAA,CAAI,CAAA,EAAG,gBAAgB,CAAC,CAAA;AAE9D,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,uEAAA,EAAmB,gBAAgB,CAAA,EAAA,CAAI,CAAA;AAEnD,MAAA,OAAO;AAAA,QACL,QAAA;AAAA,QACA,WAAA;AAAA,QACA,eAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF,SAAS,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,mCAAU,KAAK,CAAA;AAG7B,MAAA,OAAO;AAAA,QACL,UAAU,CAAA,sFAAA,EAAmB,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,UAAU,eAAe,CAAA,CAAA;AAAA,QACrF,WAAA,EAAa;AAAA,UACX,CAAA,0BAAA,EAAS,cAAc,MAAM,CAAA,MAAA,CAAA;AAAA,UAC7B,yCAAW,eAAe,CAAA,IAAA,CAAA;AAAA,UAC1B;AAAA,SACF;AAAA,QACA,eAAA,EAAiB;AAAA,UACf,gFAAA;AAAA,UACA,wDAAA;AAAA,UACA;AAAA,SACF;AAAA,QACA,gBAAA,EAAkB;AAAA,OACpB;AAAA,IACF;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,8BAA8B,UAAA,CAAW;AAAA,EAC7C,EAAA,EAAI,4BAAA;AAAA,EACJ,WAAA,EAAa,qJAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,IACnB,WAAA,EAAa,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IAC/B,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IACnC,gBAAA,EAAkB,EAAE,MAAA;AAAO,GAC5B,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,IACjB,QAAA,EAAU,EAAE,MAAA,CAAO;AAAA,MACjB,KAAA,EAAO,EAAE,MAAA,EAAO;AAAA,MAChB,WAAA,EAAa,EAAE,MAAA,EAAO;AAAA,MACtB,cAAA,EAAgB,EAAE,MAAA,EAAO;AAAA,MACzB,YAAA,EAAc,EAAE,MAAA,EAAO;AAAA,MACvB,gBAAA,EAAkB,EAAE,MAAA,EAAO;AAAA,MAC3B,aAAA,EAAe,EAAE,MAAA,EAAO;AAAA,MACxB,UAAA,EAAY,EAAE,MAAA;AAAO,KACtB;AAAA,GACF,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,WAAW,KAAA,EAAO,WAAA,EAAa,eAAc,KAAM;AACnE,IAAA,MAAM,SAAA,GAAY,KAAK,GAAA,EAAI;AAE3B,IAAA,MAAM;AAAA,MACJ,QAAA;AAAA,MACA,WAAA;AAAA,MACA,eAAA;AAAA,MACA;AAAA,KACF,GAAI,SAAA;AAEJ,IAAA,MAAM,EAAE,KAAA,EAAM,GAAI,WAAA,EAAY;AAC9B,IAAA,MAAM,EAAE,aAAA,EAAe,UAAA,EAAW,GAAI,cAAc,kBAAkB,CAAA;AACtE,IAAA,MAAM,EAAE,QAAA,EAAU,eAAA,EAAgB,GAAI,cAAc,yBAAyB,CAAA;AAG7E,IAAA,MAAM,SAAA,GAAY,aAAA,CAAc,GAAA,CAAI,CAAA,MAAA,KAAU,OAAO,GAAG,CAAA;AAGxD,IAAA,MAAM,MAAA,GAAS;AAAA;;AAAA;AAAA,QAAA,EAId,KAAK,CAAA;;AAAA;AAAA;AAAA,gCAAA,EAII,UAAU,CAAA;AAAA,sCAAA,EACT,cAAc,MAAM,CAAA;AAAA,4CAAA,EACnB,eAAe,CAAA;AAAA,4CAAA,EACf,gBAAgB,KAAK,gBAAA,IAAoB,EAAA,GAAK,cAAO,gBAAA,IAAoB,EAAA,GAAK,cAAO,WAAI;AAAA;;AAAA;AAAA,EAIvG,aAAA,CAAc,GAAA,CAAI,CAAC,MAAA,EAAQ,KAAA,KAAU;AAAA,IAAA,EACjC,KAAA,GAAQ,CAAC,CAAA,EAAA,EAAK,MAAA,CAAO,KAAK;AAAA,YAAA,EAClB,MAAA,CAAO,GAAG,CAAA,EAAA,EAAK,MAAA,CAAO,GAAG,CAAA;AAAA,oBAAA,EAC3B,OAAO,OAAO;AAAA,EACxB,OAAO,GAAA,GAAM,CAAA,oBAAA,EAAa,MAAA,CAAO,GAAG,KAAK,EAAE;AAAA,CAC5C,CAAA,CAAE,IAAA,CAAK,IAAI,CAAC;;AAAA;AAAA,EAGX,QAAQ;;AAAA;AAAA,EAGR,QAAQ;;AAAA;AAAA,EAGR,WAAA,CAAY,IAAI,CAAA,OAAA,KAAW,CAAA,EAAA,EAAK,OAAO,CAAA,CAAE,CAAA,CAAE,IAAA,CAAK,IAAI,CAAC;;AAAA;AAAA,EAGrD,eAAA,CAAgB,IAAI,CAAA,GAAA,KAAO,CAAA,EAAA,EAAK,GAAG,CAAA,CAAE,CAAA,CAAE,IAAA,CAAK,IAAI,CAAC;;AAAA;AAAA,EAGjD,SAAA,CAAU,SAAS,CAAA,GACjB,SAAA,CAAU,IAAI,CAAC,GAAA,EAAK,UAAU,CAAA,EAAG,KAAA,GAAQ,CAAC,CAAA,GAAA,EAAM,GAAG,KAAK,GAAG,CAAA,CAAA,CAAG,EAAE,IAAA,CAAK,IAAI,IACzE,4FACJ;;AAAA;AAAA;AAAA,4CAAA,EAIgB,UAAU,CAAA;AAAA,4CAAA,EACV,IAAA,CAAK,GAAA,EAAI,GAAI,SAAS,CAAA;AAAA,sCAAA,EACvB,eAAe,CAAA;AAAA,sCAAA,EACf,gBAAgB,CAAA;AAAA,wDAAA,EAAA,iBACb,IAAI,IAAA,EAAK,EAAE,cAAA,CAAe,OAAO,CAAC;;AAAA;AAAA;AAAA,IAAA,CAAA,CAI9C,IAAA,EAAK;AAEP,IAAA,MAAM,cAAA,GAAiB,IAAA,CAAK,GAAA,EAAI,GAAI,SAAA;AAEpC,IAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,2EAAA,EAAqB,cAAc,CAAA,GAAA,CAAK,CAAA;AAEpD,IAAA,OAAO;AAAA,MACL,MAAA;AAAA,MACA,QAAA,EAAU;AAAA,QACR,KAAA,EAAO,KAAA,IAAS,CAAA,WAAA,EAAc,IAAA,CAAK,KAAK,CAAA,CAAA;AAAA,QACxC,WAAA,EAAA,iBAAa,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AAAA,QACpC,cAAA;AAAA,QACA,YAAA,EAAc,oBAAA;AAAA,QACd,gBAAA;AAAA,QACA,eAAe,SAAA,CAAU,MAAA;AAAA,QACzB,UAAA,EAAY;AAAA;AACd,KACF;AAAA,EACF;AACF,CAAC,CAAA;AAGM,MAAM,oBAAoB,cAAA,CAAe;AAAA,EAC9C,EAAA,EAAI,qBAAA;AAAA,EACJ,WAAA,EAAa,yMAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,KAAA,EAAO,EAAE,MAAA,EAAO;AAAA,IAChB,YAAY,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,QAAQ,EAAE,CAAA;AAAA,IAC5C,UAAU,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,QAAQ,IAAI,CAAA;AAAA,IAC5C,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,MACrB,SAAS,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,QAAQ,IAAI,CAAA;AAAA,MAC3C,MAAM,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,QAAQ,OAAO,CAAA;AAAA,MAC3C,QAAQ,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,QAAQ,OAAO;AAAA,KAC9C,EAAE,QAAA;AAAS,GACb,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,IACjB,QAAA,EAAU,EAAE,MAAA,CAAO;AAAA,MACjB,KAAA,EAAO,EAAE,MAAA,EAAO;AAAA,MAChB,WAAA,EAAa,EAAE,MAAA,EAAO;AAAA,MACtB,cAAA,EAAgB,EAAE,MAAA,EAAO;AAAA,MACzB,YAAA,EAAc,EAAE,MAAA,EAAO;AAAA,MACvB,gBAAA,EAAkB,EAAE,MAAA,EAAO;AAAA,MAC3B,aAAA,EAAe,EAAE,MAAA,EAAO;AAAA,MACxB,UAAA,EAAY,EAAE,MAAA;AAAO,KACtB;AAAA,GACF;AACH,CAAC,CAAA,CACE,IAAA,CAAK,kBAAkB,CAAA,CACvB,IAAA,CAAK,yBAAyB,CAAA,CAC9B,IAAA,CAAK,wBAAwB,CAAA,CAC7B,IAAA,CAAK,2BAA2B,EAChC,MAAA,EAAO;;AC1mBV,MAAM,oBAAoB,UAAA,CAAW;AAAA,EACnC,EAAA,EAAI,gBAAA;AAAA,EACJ,WAAA,EAAa,oIAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,wDAAW,CAAA;AAAA,IACtC,UAAA,EAAY,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,GAAW,OAAA,CAAQ,CAAC,CAAA,CAAE,QAAA,CAAS,4CAAS,CAAA;AAAA,IAC/D,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,GAAW,OAAA,CAAQ,QAAQ,CAAA,CAAE,QAAA,CAAS,wDAAW,CAAA;AAAA,IACnE,QAAA,EAAU,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,GAAW,OAAA,CAAQ,IAAI,CAAA,CAAE,QAAA,CAAS,4CAAS;AAAA,GACjE,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,IACnB,cAAA,EAAgB,EAAE,MAAA,EAAO;AAAA,IACzB,UAAA,EAAY,EAAE,MAAA,EAAO;AAAA,IACrB,KAAA,EAAO,EAAE,MAAA;AAAO,GACjB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,SAAA,EAAW,cAAA,EAAgB,QAAO,KAAM;AACxD,IAAA,MAAM,EAAE,KAAA,EAAO,UAAA,EAAY,KAAA,EAAO,UAAS,GAAI,SAAA;AAE/C,IAAA,MAAM,SAAA,GAAY,KAAK,GAAA,EAAI;AAE3B,IAAA,IAAI;AACF,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,6DAAA,EAAiB,KAAK,CAAA,GAAA,EAAM,UAAU,CAAA,OAAA,CAAI,CAAA;AAGtD,MAAA,MAAM,UAAA,GAAa,cAAA,EAAgB,GAAA,CAAI,YAAY,CAAA;AACnD,MAAA,MAAM,QAAA,GAAW,cAAA,EAAgB,GAAA,CAAI,UAAU,CAAA;AAE/C,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,uEAAA,EAA2B,UAAU,CAAA,WAAA,EAAc,QAAQ,CAAA,CAAE,CAAA;AAGzE,MAAA,MAAM,KAAA,GAAQ,MAAA,EAAQ,QAAA,CAAS,eAAe,CAAA;AAC9C,MAAA,IAAI,CAAC,KAAA,EAAO;AACV,QAAA,MAAM,IAAI,MAAM,+DAAuB,CAAA;AAAA,MACzC;AAGA,MAAA,MAAM,WAAA,GAAc,aAAa,IAAA,GAC7B,CAAA,MAAA,EAAI,KAAK,CAAA,8BAAA,EAAQ,UAAU,iIAAwB,KAAK,CAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAA,EAyB9D,KAAK,CAAA;AAAA;AAAA;AAAA;AAAA,gHAAA,CAAA,GAKC,CAAA,OAAA,EAAU,UAAU,CAAA,eAAA,EAAkB,KAAK,QAAQ,KAAK,CAAA,uCAAA,CAAA;AAG5D,MAAA,MAAM,EAAE,IAAA,EAAM,QAAA,EAAS,GAAI,MAAM,KAAA,CAAM,QAAA;AAAA,QACrC,WAAA;AAAA,QACA;AAAA,UACE,MAAA,EAAQ,cAAc,QAAA,GAAW;AAAA,YAC/B,QAAA,EAAU,UAAA;AAAA,YACV,MAAA,EAAQ;AAAA,WACV,GAAI;AAAA;AACN,OACF;AAGA,MAAA,IAAI,eAAA,GAAkB,SAAS,OAAA,CAAQ,kBAAA,EAAoB,EAAE,CAAA,CAAE,OAAA,CAAQ,aAAa,EAAE,CAAA;AACtF,MAAA,eAAA,GAAkB,gBAAgB,OAAA,CAAQ,cAAA,EAAgB,EAAE,CAAA,CAAE,OAAA,CAAQ,aAAa,EAAE,CAAA;AAErF,MAAA,MAAM,cAAA,GAAiB,IAAA,CAAK,GAAA,EAAI,GAAI,SAAA;AAEpC,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,yDAAA,EAAe,cAAc,CAAA,GAAA,CAAK,CAAA;AAC9C,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,gEAAA,EAAoB,eAAA,CAAgB,MAAM,CAAA,YAAA,CAAI,CAAA;AAE1D,MAAA,OAAO;AAAA,QACL,QAAA,EAAU,eAAA;AAAA,QACV,cAAA;AAAA,QACA,UAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF,SAAS,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,2DAAc,KAAK,CAAA;AAGjC,MAAA,MAAM,YAAA,GAAe,CAAA;AAAA,YAAA,EACb,QAAQ,CAAA;AAAA;AAAA;AAAA;AAAA,WAAA,EAIT,KAAK,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEAAA,EA+EwD,UAAU,CAAA;AAAA;AAAA;AAAA;AAAA,gBAAA,EAIlE,KAAK,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAA,EAMN,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,eAAe,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA,CAAA;AAuDnE,MAAA,MAAM,cAAA,GAAiB,IAAA,CAAK,GAAA,EAAI,GAAI,SAAA;AAEpC,MAAA,OAAO;AAAA,QACL,QAAA,EAAU,YAAA;AAAA,QACV,cAAA;AAAA,QACA,UAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AAAA,EACF;AACF,CAAC,CAAA;AAGM,MAAM,0BAA0B,cAAA,CAAe;AAAA,EACpD,EAAA,EAAI,2BAAA;AAAA,EACJ,WAAA,EAAa,8HAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,wDAAW,CAAA;AAAA,IACtC,UAAA,EAAY,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,GAAW,OAAA,CAAQ,CAAC,CAAA,CAAE,QAAA,CAAS,4CAAS,CAAA;AAAA,IAC/D,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,GAAW,OAAA,CAAQ,QAAQ,CAAA,CAAE,QAAA,CAAS,wDAAW,CAAA;AAAA,IACnE,QAAA,EAAU,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,GAAW,OAAA,CAAQ,IAAI,CAAA,CAAE,QAAA,CAAS,4CAAS;AAAA,GACjE,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,IACnB,cAAA,EAAgB,EAAE,MAAA,EAAO;AAAA,IACzB,UAAA,EAAY,EAAE,MAAA,EAAO;AAAA,IACrB,KAAA,EAAO,EAAE,MAAA;AAAO,GACjB;AACH,CAAC,CAAA,CACE,IAAA,CAAK,iBAAiB,CAAA,CACtB,MAAA,EAAO;;ACtRH,MAAM,YAAA,GAAe,IAAI,MAAA,CAAO;AAAA,EACrC,OAAA,EAAS,IAAI,WAAA,CAAY;AAAA,IACvB,GAAA,EAAK;AAAA;AAAA,GACN,CAAA;AAAA,EACD,OAAA,EAAS;AAAA,IACP,YAAA,EAAc,EAAA;AAAA;AAAA,IACd,aAAA,EAAe;AAAA,MACb,OAAA,EAAS,IAAA;AAAA,MACT,QAAA,EAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOZ;AAEJ,CAAC,CAAA;;AChBM,MAAM,YAAA,GAAe,IAAI,KAAA,CAAM;AAAA,EACpC,IAAA,EAAM,eAAA;AAAA,EACN,YAAA,EAAc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,CAAA;AAAA,EAcd,KAAA,EAAO,UAAU,0BAA0B,CAAA;AAAA,EAC3C,KAAA,EAAO,EAAE,WAAA,EAAY;AAAA,EACrB,MAAA,EAAQ;AACV,CAAC,CAAA;;ACVM,SAAS,kBAAA,CAAmB,YAAoB,iBAAA,EAA0B;AAE/E,EAAA,IAAI,OAAA;AACJ,EAAA,IAAI,SAAA;AAEJ,EAAA,QAAQ,SAAA;AAAW,IACjB,KAAK,WAAA;AACH,MAAA,OAAA,GAAU,OAAO,eAAe,CAAA;AAChC,MAAA,SAAA,GAAY,EAAE,QAAA,EAAU,QAAA,EAAU,OAAA,EAAS,eAAA,EAAiB,aAAa,WAAA,EAAY;AACrF,MAAA;AAAA,IACF,KAAK,kBAAA;AACH,MAAA,OAAA,GAAU,OAAO,kBAAkB,CAAA;AACnC,MAAA,SAAA,GAAY,EAAE,QAAA,EAAU,QAAA,EAAU,OAAA,EAAS,kBAAA,EAAoB,aAAa,kBAAA,EAAmB;AAC/F,MAAA;AAAA,IACF,KAAK,iBAAA;AAAA,IACL;AACE,MAAA,OAAA,GAAU,UAAU,0BAA0B,CAAA;AAC9C,MAAA,SAAA,GAAY,EAAE,QAAA,EAAU,WAAA,EAAa,OAAA,EAAS,0BAAA,EAA4B,aAAa,iBAAA,EAAkB;AACzG,MAAA;AAAA;AAGJ,EAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,4CAAA,EAAe,SAAA,CAAU,WAAW,CAAA,EAAA,EAAK,UAAU,QAAQ,CAAA,GAAA,EAAM,SAAA,CAAU,OAAO,CAAA,CAAA,CAAG,CAAA;AAGjG,EAAA,OAAA,CAAQ,IAAI,CAAA,qBAAA,EAAwB,SAAA,CAAU,OAAO,CAAA,UAAA,EAAa,SAAA,CAAU,QAAQ,CAAA,CAAE,CAAA;AAEtF,EAAA,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM;AAAA,IACtB,IAAA,EAAM,sBAAA;AAAA,IACN,YAAA,EAAc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA,CAAA;AAAA,IAqDd,KAAA,EAAO,OAAA;AAAA,IACP,OAAO,EAAE,WAAA,EAAa,eAAe,mBAAA,EAAqB,gBAAA,EAAkB,eAAe,aAAA,EAAc;AAAA,IACzG,MAAA,EAAQ;AAAA,GACT,CAAA;AAGD,EAAC,MAAsF,UAAA,GAAa,SAAA;AAEpG,EAAA,OAAO,KAAA;AACT;AAGO,MAAM,eAAe,kBAAA;;ACvGrB,MAAM,aAAA,GAAgB,IAAI,KAAA,CAAM;AAAA,EACrC,IAAA,EAAM,mBAAA;AAAA,EACN,YAAA,EAAc;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAgBd,KAAA,EAAO,UAAU,0BAA0B,CAAA;AAAA,EAC3C,OAAO,EAAC;AAAA;AAAA,EACR,MAAA,EAAQ;AACV,CAAC;;ACbC,MAAW,MAAA,GAAA,IAAA,MAAA,CAAA;AAAA,EAAA,SAAA,EACT;AAAA,IACA,eAAA;AAAA,IACA,iBAAA;AAAA,IACF;AAAA,GACA;AAAA,EAAQ,MAAA,EACN;AAAA,IACA,YAAA;AAAA,IACA,YAAA;AAAA,IACF;AAAA,GACA;AAAA,EAAyB,OAAA,EAAA,IAAA,WAAA,CAAA;AAAA;AAAA,IAGxB,GAAA,EAAA;AAAA,GACD,CAAA;AAAA,EAAuB,MAAA,EACf,IAAA,UAAA,CAAA;AAAA,IACN,IAAA,EAAA,QAAA;AAAA,IAAiC,KAAA,EAAA,OAAA,CAAA,GAAA,CAAA,SAAA,IAAA;AAAA;AAAA,GAEpC;AAGD,CAAA;;;;"}