{"version":3,"file":"f55f74d0-259b-40f7-8cff-7623a7a76009.mjs","sources":["../../../src/mastra/mcp/brave-mcp-client.ts","../../../src/mastra/tools/brave-search-wrapper.ts"],"sourcesContent":["import { MCPClient } from '@mastra/mcp';\n\n// シングルトンインスタンス\nlet mcpClientInstance: MCPClient | null = null;\n\n// Brave MCPクライアントの設定\nexport const getBraveMCPClient = () => {\n  // 既存のインスタンスがあればそれを返す\n  if (mcpClientInstance) {\n    console.log('♻️ 既存のBrave MCPクライアントを再利用');\n    return mcpClientInstance;\n  }\n  \n  console.log('🔧 Brave MCPクライアントを初期化中...');\n  \n  const apiKey = process.env.BRAVE_API_KEY;\n  if (!apiKey) {\n    console.error('❌ BRAVE_API_KEYが設定されていません');\n  } else {\n    console.log('✅ BRAVE_API_KEYが設定されています');\n  }\n  \n  // 新しいインスタンスを作成\n  mcpClientInstance = new MCPClient({\n    id: 'brave-search-mcp', // ユニークなIDを設定\n    servers: {\n      braveSearch: {\n        command: 'npx',\n        args: ['-y', '@modelcontextprotocol/server-brave-search'],\n        env: {\n          BRAVE_API_KEY: apiKey || '',\n        },\n      },\n    },\n  });\n  \n  console.log('✅ Brave MCPクライアントを作成しました');\n  \n  return mcpClientInstance;\n};\n\n// クライアントをリセットする関数（必要に応じて）\nexport const resetBraveMCPClient = async () => {\n  if (mcpClientInstance) {\n    console.log('🔌 既存のMCPクライアントを切断中...');\n    await mcpClientInstance.disconnect();\n    mcpClientInstance = null;\n  }\n}; ","import { createTool } from '@mastra/core/tools';\nimport { z } from 'zod';\nimport { getBraveMCPClient } from '../mcp/brave-mcp-client';\n\n// MCPツールを取得してキャッシュ\ninterface MCPTool {\n  execute: (params: {\n    context: Record<string, unknown>;\n    mastra?: unknown;\n    runtimeContext?: unknown;\n  }) => Promise<unknown>;\n}\n\nlet mcpTools: Record<string, MCPTool> | null = null;\n\nasync function getMCPTools() {\n  if (mcpTools) {\n    return mcpTools;\n  }\n  \n  console.log('🔧 MCPツールを初回取得中...');\n  const mcpClient = getBraveMCPClient();\n  mcpTools = await mcpClient.getTools();\n  console.log('📦 取得したMCPツール:', Object.keys(mcpTools));\n  \n  return mcpTools;\n}\n\n// Brave MCPツールをMastraツールとしてラップ\nexport const braveMCPSearchTool = createTool({\n  id: 'brave-mcp-search',\n  description: 'Brave MCPを使用してWeb検索を実行します',\n  inputSchema: z.object({\n    query: z.string(),\n    count: z.number().optional().default(10),\n  }),\n  outputSchema: z.object({\n    searchResults: z.string(),\n    success: z.boolean(),\n  }),\n  execute: async ({ context, mastra, runtimeContext }) => {\n    const { query, count } = context;\n    \n    try {\n      console.log(`🔍 Brave MCPツールでWeb検索を実行: \"${query}\"`);\n      \n      // MCPツールを取得\n      const tools = await getMCPTools();\n      \n      // braveSearch_brave_web_search ツールを探す（MCPClient.getTools()はサーバー名でプレフィックスを付ける）\n      const braveSearchToolName = Object.keys(tools).find(name => \n        name.includes('brave_web_search')\n      );\n      \n      if (!braveSearchToolName) {\n        console.error('❌ Brave Web検索ツールが見つかりません');\n        console.error('利用可能なツール:', Object.keys(tools));\n        return {\n          searchResults: JSON.stringify({ error: 'Brave Web検索ツールが見つかりません' }),\n          success: false,\n        };\n      }\n      \n      console.log(`🔧 使用するツール: ${braveSearchToolName}`);\n      const braveSearchTool = tools[braveSearchToolName];\n      \n      // Mastraツールとして実行\n      console.log('📝 ツール実行パラメータ:', {\n        query,\n        count,\n      });\n      \n      const searchResult = await braveSearchTool.execute({\n        context: {\n          query,\n          count,\n        },\n        mastra,\n        runtimeContext,\n      });\n      \n      console.log('✅ Brave MCP検索完了');\n      console.log('📊 検索結果:', searchResult);\n      console.log('📊 検索結果のタイプ:', typeof searchResult);\n      console.log('📊 検索結果のキー:', searchResult ? Object.keys(searchResult) : 'null');\n      \n      // 検索結果の内容を確認\n      let resultString = '';\n      if (searchResult && typeof searchResult === 'object') {\n        // MCPツールの結果はcontent配列を持つ可能性がある\n        if ('content' in searchResult && Array.isArray(searchResult.content)) {\n          console.log('📊 content 配列:', searchResult.content);\n          // content配列の最初の要素を取得\n          const firstContent = searchResult.content[0];\n          if (firstContent && typeof firstContent === 'object' && 'text' in firstContent) {\n            console.log('📊 text プロパティ:', firstContent.text);\n            resultString = firstContent.text;\n          } else {\n            resultString = JSON.stringify(searchResult.content);\n          }\n        }\n        // resultプロパティがある場合\n        else if ('result' in searchResult) {\n          console.log('📊 result プロパティ:', searchResult.result);\n          resultString = typeof searchResult.result === 'string' \n            ? searchResult.result \n            : JSON.stringify(searchResult.result);\n        } \n        // dataプロパティがある場合\n        else if ('data' in searchResult) {\n          console.log('📊 data プロパティ:', searchResult.data);\n          resultString = typeof searchResult.data === 'string' \n            ? searchResult.data \n            : JSON.stringify(searchResult.data);\n        }\n        // その他の場合\n        else {\n          console.log('📊 その他の形式:', searchResult);\n          resultString = JSON.stringify(searchResult);\n        }\n      } else if (typeof searchResult === 'string') {\n        resultString = searchResult;\n      } else {\n        resultString = JSON.stringify(searchResult);\n      }\n      \n      console.log('📊 最終的な結果文字列:', resultString.substring(0, 200) + '...');\n      \n      return {\n        searchResults: resultString,\n        success: true,\n      };\n    } catch (error) {\n      console.error('❌ Brave MCP検索エラー:', error);\n      console.error('エラーの詳細:', {\n        name: error instanceof Error ? error.name : 'Unknown',\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n      });\n      return {\n        searchResults: JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),\n        success: false,\n      };\n    }\n  },\n}); "],"names":[],"mappings":"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"}