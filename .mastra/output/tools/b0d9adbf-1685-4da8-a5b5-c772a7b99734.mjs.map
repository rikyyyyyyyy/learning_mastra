{"version":3,"file":"b0d9adbf-1685-4da8-a5b5-c772a7b99734.mjs","sources":["../../../src/mastra/tools/job-status-tool.ts"],"sourcesContent":["import { createTool } from '@mastra/core/tools';\nimport { z } from 'zod';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// „Ç∏„Éß„ÉñÁµêÊûú„Çí‰øùÂ≠ò„Åô„Çã„Éá„Ç£„É¨„ÇØ„Éà„É™\nconst JOB_RESULTS_DIR = path.join(process.cwd(), '.job-results');\n\n// „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê\nif (!fs.existsSync(JOB_RESULTS_DIR)) {\n  fs.mkdirSync(JOB_RESULTS_DIR, { recursive: true });\n}\n\ninterface JobStatus {\n  status: 'queued' | 'running' | 'completed' | 'failed';\n  result?: unknown;\n  error?: string;\n  startedAt?: Date;\n  completedAt?: Date;\n}\n\n// Á∞°ÊòìÁöÑ„Å™„Ç∏„Éß„ÉñÁä∂ÊÖãÁÆ°ÁêÜÔºàÂÆüÈöõ„ÅÆ„Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥„Åß„ÅØ„Éá„Éº„Çø„Éô„Éº„Çπ„Çí‰ΩøÁî®Ôºâ\nconst jobStatusStore = new Map<string, JobStatus>();\n\ninterface JobResult {\n  jobId: string;\n  result: unknown;\n  completedAt: Date;\n  workflowId: string;\n}\n\n// „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÁµêÊûúÂ∞ÇÁî®„Çπ„Éà„É¨„Éº„Ç∏ÔºàÊú¨Áï™„Åß„ÅØ„Éá„Éº„Çø„Éô„Éº„Çπ„Çí‰ΩøÁî®Ôºâ\n// const jobResultStore = new Map<string, JobResult>();\n\nexport const jobStatusTool = createTool({\n  id: 'job-status-check',\n  description: '„Ç∏„Éß„ÉñID„ÇíÊåáÂÆö„Åó„Å¶„Ç∏„Éß„Éñ„ÅÆÂÆüË°åÁä∂ÊÖã„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô',\n  inputSchema: z.object({\n    jobId: z.string().describe('Á¢∫Ë™ç„Åó„Åü„ÅÑ„Ç∏„Éß„ÉñID'),\n  }),\n  outputSchema: z.object({\n    jobId: z.string(),\n    status: z.enum(['queued', 'running', 'completed', 'failed', 'not_found']),\n    message: z.string(),\n    result: z.any().optional(),\n    error: z.string().optional(),\n    startedAt: z.string().optional(),\n    completedAt: z.string().optional(),\n  }),\n  execute: async ({ context }) => {\n    const { jobId } = context;\n    \n    const jobInfo = jobStatusStore.get(jobId);\n    \n    if (!jobInfo) {\n      return {\n        jobId,\n        status: 'not_found' as const,\n        message: `„Ç∏„Éß„ÉñID„Äå${jobId}„Äç„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü`,\n      };\n    }\n    \n    const response = {\n      jobId,\n      status: jobInfo.status,\n      message: getStatusMessage(jobInfo.status),\n      result: jobInfo.result,\n      error: jobInfo.error,\n      startedAt: jobInfo.startedAt?.toISOString(),\n      completedAt: jobInfo.completedAt?.toISOString(),\n    };\n    \n    return response;\n  },\n});\n\n// „Ç∏„Éß„ÉñÁä∂ÊÖã„ÇíÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞Ôºà‰ªñ„ÅÆ„ÉÑ„Éº„É´„Åã„ÇâÂëº„Å≥Âá∫„ÅóÂèØËÉΩÔºâ\nexport function updateJobStatus(\n  jobId: string, \n  status: 'queued' | 'running' | 'completed' | 'failed',\n  options?: {\n    result?: unknown;\n    error?: string;\n  }\n) {\n  const existing = jobStatusStore.get(jobId) || { status: 'queued' };\n  \n  const updated: JobStatus = {\n    ...existing,\n    status,\n    ...(options?.result ? { result: options.result } : {}),\n    ...(options?.error ? { error: options.error } : {}),\n    ...(status === 'running' && !existing.startedAt ? { startedAt: new Date() } : {}),\n    ...(status === 'completed' || status === 'failed' ? { completedAt: new Date() } : {}),\n  };\n  \n  jobStatusStore.set(jobId, updated);\n  console.log(`üìä „Ç∏„Éß„ÉñÁä∂ÊÖãÊõ¥Êñ∞: ${jobId} -> ${status}`);\n}\n\n// „Ç∏„Éß„ÉñÁä∂ÊÖã„ÇíÂàùÊúüÂåñ„Åô„ÇãÈñ¢Êï∞\nexport function initializeJob(jobId: string) {\n  jobStatusStore.set(jobId, {\n    status: 'queued',\n    startedAt: new Date(),\n  });\n}\n\n// „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÁµêÊûú„ÇíÊ†ºÁ¥ç„Åô„ÇãÈñ¢Êï∞Ôºà„Éï„Ç°„Ç§„É´„Ç∑„Çπ„ÉÜ„É†„Å´‰øùÂ≠òÔºâ\nexport function storeJobResult(\n  jobId: string,\n  result: unknown,\n  workflowId: string = 'unknown'\n) {\n  const jobResult = {\n    jobId,\n    result,\n    completedAt: new Date().toISOString(),\n    workflowId,\n  };\n  \n  // „Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò\n  const filePath = path.join(JOB_RESULTS_DIR, `${jobId}.json`);\n  try {\n    fs.writeFileSync(filePath, JSON.stringify(jobResult, null, 2));\n    console.log(`üíæ „Ç∏„Éß„ÉñÁµêÊûú„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò: ${filePath}`);\n  } catch (error) {\n    console.error(`‚ùå „Ç∏„Éß„ÉñÁµêÊûú„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó: ${error}`);\n  }\n}\n\n// „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÁµêÊûú„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞Ôºà„Éï„Ç°„Ç§„É´„Ç∑„Çπ„ÉÜ„É†„Åã„ÇâË™≠„ÅøËæº„ÅøÔºâ\nexport function getJobResult(jobId: string): JobResult | null {\n  console.log(`üîç „Ç∏„Éß„ÉñÁµêÊûú„ÇíÊ§úÁ¥¢: ${jobId}`);\n  \n  const filePath = path.join(JOB_RESULTS_DIR, `${jobId}.json`);\n  \n  try {\n    if (fs.existsSync(filePath)) {\n      const data = fs.readFileSync(filePath, 'utf-8');\n      const result = JSON.parse(data);\n      console.log(`‚úÖ „Ç∏„Éß„ÉñÁµêÊûú„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü: ${jobId} („Éï„Ç°„Ç§„É´: ${filePath})`);\n      // DateÊñáÂ≠óÂàó„ÇíDate„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´Â§âÊèõ\n      result.completedAt = new Date(result.completedAt);\n      return result;\n    } else {\n      console.log(`‚ùå „Ç∏„Éß„ÉñÁµêÊûú„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${filePath}`);\n      // „Éá„Ç£„É¨„ÇØ„Éà„É™ÂÜÖ„ÅÆ„Éï„Ç°„Ç§„É´‰∏ÄË¶ß„ÇíË°®Á§∫\n      const files = fs.readdirSync(JOB_RESULTS_DIR);\n      console.log(`üìÅ Âà©Áî®ÂèØËÉΩ„Å™„Ç∏„Éß„ÉñÁµêÊûú: ${files.join(', ')}`);\n    }\n  } catch (error) {\n    console.error(`‚ùå „Ç∏„Éß„ÉñÁµêÊûú„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº: ${error}`);\n  }\n  \n  return null;\n}\n\n// ÂÆå‰∫Ü„Åó„Åü„Ç∏„Éß„Éñ„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞\nexport function getCompletedJobs(): string[] {\n  try {\n    const files = fs.readdirSync(JOB_RESULTS_DIR);\n    return files\n      .filter(file => file.endsWith('.json'))\n      .map(file => file.replace('.json', ''));\n  } catch (error) {\n    console.error(`‚ùå „Ç∏„Éß„Éñ‰∏ÄË¶ß„ÅÆÂèñÂæó„Ç®„É©„Éº: ${error}`);\n    return [];\n  }\n}\n\nfunction getStatusMessage(status: string): string {\n  switch (status) {\n    case 'queued':\n      return '„Ç∏„Éß„Éñ„ÅØÂÆüË°åÂæÖ„Å°„Åß„Åô';\n    case 'running':\n      return '„Ç∏„Éß„Éñ„ÇíÂÆüË°å‰∏≠„Åß„Åô';\n    case 'completed':\n      return '„Ç∏„Éß„Éñ„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü';\n    case 'failed':\n      return '„Ç∏„Éß„Éñ„ÅÆÂÆüË°å„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';\n    default:\n      return '‰∏çÊòé„Å™Áä∂ÊÖã„Åß„Åô';\n  }\n} "],"names":[],"mappings":";;;;;AAMA,MAAM,kBAAkB,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ,GAAA,IAAO,cAAc,CAAA;AAG/D,IAAI,CAAC,EAAA,CAAG,UAAA,CAAW,eAAe,CAAA,EAAG;AACnC,EAAA,EAAA,CAAG,SAAA,CAAU,eAAA,EAAiB,EAAE,SAAA,EAAW,MAAM,CAAA;AACnD;AAWA,MAAM,cAAA,uBAAqB,GAAA,EAAuB;AAY3C,MAAM,gBAAgB,UAAA,CAAW;AAAA,EACtC,EAAA,EAAI,kBAAA;AAAA,EACJ,WAAA,EAAa,wIAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,oDAAY;AAAA,GACxC,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,KAAA,EAAO,EAAE,MAAA,EAAO;AAAA,IAChB,MAAA,EAAQ,EAAE,IAAA,CAAK,CAAC,UAAU,SAAA,EAAW,WAAA,EAAa,QAAA,EAAU,WAAW,CAAC,CAAA;AAAA,IACxE,OAAA,EAAS,EAAE,MAAA,EAAO;AAAA,IAClB,MAAA,EAAQ,CAAA,CAAE,GAAA,EAAI,CAAE,QAAA,EAAS;AAAA,IACzB,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,IAC3B,SAAA,EAAW,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,IAC/B,WAAA,EAAa,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA;AAAS,GAClC,CAAA;AAAA,EACD,OAAA,EAAS,OAAO,EAAE,OAAA,EAAQ,KAAM;AAC9B,IAAA,MAAM,EAAE,OAAM,GAAI,OAAA;AAElB,IAAA,MAAM,OAAA,GAAU,cAAA,CAAe,GAAA,CAAI,KAAK,CAAA;AAExC,IAAA,IAAI,CAAC,OAAA,EAAS;AACZ,MAAA,OAAO;AAAA,QACL,KAAA;AAAA,QACA,MAAA,EAAQ,WAAA;AAAA,QACR,OAAA,EAAS,6BAAS,KAAK,CAAA,wEAAA;AAAA,OACzB;AAAA,IACF;AAEA,IAAA,MAAM,QAAA,GAAW;AAAA,MACf,KAAA;AAAA,MACA,QAAQ,OAAA,CAAQ,MAAA;AAAA,MAChB,OAAA,EAAS,gBAAA,CAAiB,OAAA,CAAQ,MAAM,CAAA;AAAA,MACxC,QAAQ,OAAA,CAAQ,MAAA;AAAA,MAChB,OAAO,OAAA,CAAQ,KAAA;AAAA,MACf,SAAA,EAAW,OAAA,CAAQ,SAAA,EAAW,WAAA,EAAY;AAAA,MAC1C,WAAA,EAAa,OAAA,CAAQ,WAAA,EAAa,WAAA;AAAY,KAChD;AAEA,IAAA,OAAO,QAAA;AAAA,EACT;AACF,CAAC;AAGM,SAAS,eAAA,CACd,KAAA,EACA,MAAA,EACA,OAAA,EAIA;AACA,EAAA,MAAM,WAAW,cAAA,CAAe,GAAA,CAAI,KAAK,CAAA,IAAK,EAAE,QAAQ,QAAA,EAAS;AAEjE,EAAA,MAAM,OAAA,GAAqB;AAAA,IACzB,GAAG,QAAA;AAAA,IACH,MAAA;AAAA,IACA,GAAI,SAAS,MAAA,GAAS,EAAE,QAAQ,OAAA,CAAQ,MAAA,KAAW,EAAC;AAAA,IACpD,GAAI,SAAS,KAAA,GAAQ,EAAE,OAAO,OAAA,CAAQ,KAAA,KAAU,EAAC;AAAA,IACjD,GAAI,MAAA,KAAW,SAAA,IAAa,CAAC,QAAA,CAAS,SAAA,GAAY,EAAE,SAAA,kBAAW,IAAI,IAAA,EAAK,EAAE,GAAI,EAAC;AAAA,IAC/E,GAAI,MAAA,KAAW,WAAA,IAAe,MAAA,KAAW,QAAA,GAAW,EAAE,WAAA,kBAAa,IAAI,IAAA,EAAK,EAAE,GAAI;AAAC,GACrF;AAEA,EAAA,cAAA,CAAe,GAAA,CAAI,OAAO,OAAO,CAAA;AACjC,EAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,sDAAA,EAAe,KAAK,CAAA,IAAA,EAAO,MAAM,CAAA,CAAE,CAAA;AACjD;AAGO,SAAS,cAAc,KAAA,EAAe;AAC3C,EAAA,cAAA,CAAe,IAAI,KAAA,EAAO;AAAA,IACxB,MAAA,EAAQ,QAAA;AAAA,IACR,SAAA,sBAAe,IAAA;AAAK,GACrB,CAAA;AACH;AAGO,SAAS,cAAA,CACd,KAAA,EACA,MAAA,EACA,UAAA,GAAqB,SAAA,EACrB;AACA,EAAA,MAAM,SAAA,GAAY;AAAA,IAChB,KAAA;AAAA,IACA,MAAA;AAAA,IACA,WAAA,EAAA,iBAAa,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AAAA,IACpC;AAAA,GACF;AAGA,EAAA,MAAM,WAAW,IAAA,CAAK,IAAA,CAAK,eAAA,EAAiB,CAAA,EAAG,KAAK,CAAA,KAAA,CAAO,CAAA;AAC3D,EAAA,IAAI;AACF,IAAA,EAAA,CAAG,cAAc,QAAA,EAAU,IAAA,CAAK,UAAU,SAAA,EAAW,IAAA,EAAM,CAAC,CAAC,CAAA;AAC7D,IAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,0FAAA,EAAqB,QAAQ,CAAA,CAAE,CAAA;AAAA,EAC7C,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,2EAAA,EAAkB,KAAK,CAAA,CAAE,CAAA;AAAA,EACzC;AACF;AAGO,SAAS,aAAa,KAAA,EAAiC;AAC5D,EAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,4DAAA,EAAgB,KAAK,CAAA,CAAE,CAAA;AAEnC,EAAA,MAAM,WAAW,IAAA,CAAK,IAAA,CAAK,eAAA,EAAiB,CAAA,EAAG,KAAK,CAAA,KAAA,CAAO,CAAA;AAE3D,EAAA,IAAI;AACF,IAAA,IAAI,EAAA,CAAG,UAAA,CAAW,QAAQ,CAAA,EAAG;AAC3B,MAAA,MAAM,IAAA,GAAO,EAAA,CAAG,YAAA,CAAa,QAAA,EAAU,OAAO,CAAA;AAC9C,MAAA,MAAM,MAAA,GAAS,IAAA,CAAK,KAAA,CAAM,IAAI,CAAA;AAC9B,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,uFAAA,EAAoB,KAAK,CAAA,4BAAA,EAAW,QAAQ,CAAA,CAAA,CAAG,CAAA;AAE3D,MAAA,MAAA,CAAO,WAAA,GAAc,IAAI,IAAA,CAAK,MAAA,CAAO,WAAW,CAAA;AAChD,MAAA,OAAO,MAAA;AAAA,IACT,CAAA,MAAO;AACL,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,+GAAA,EAAwB,QAAQ,CAAA,CAAE,CAAA;AAE9C,MAAA,MAAM,KAAA,GAAQ,EAAA,CAAG,WAAA,CAAY,eAAe,CAAA;AAC5C,MAAA,OAAA,CAAQ,IAAI,CAAA,wEAAA,EAAkB,KAAA,CAAM,IAAA,CAAK,IAAI,CAAC,CAAA,CAAE,CAAA;AAAA,IAClD;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,uFAAA,EAAoB,KAAK,CAAA,CAAE,CAAA;AAAA,EAC3C;AAEA,EAAA,OAAO,IAAA;AACT;AAGO,SAAS,gBAAA,GAA6B;AAC3C,EAAA,IAAI;AACF,IAAA,MAAM,KAAA,GAAQ,EAAA,CAAG,WAAA,CAAY,eAAe,CAAA;AAC5C,IAAA,OAAO,KAAA,CACJ,MAAA,CAAO,CAAA,IAAA,KAAQ,IAAA,CAAK,SAAS,OAAO,CAAC,CAAA,CACrC,GAAA,CAAI,CAAA,IAAA,KAAQ,IAAA,CAAK,OAAA,CAAQ,OAAA,EAAS,EAAE,CAAC,CAAA;AAAA,EAC1C,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,2EAAA,EAAkB,KAAK,CAAA,CAAE,CAAA;AACvC,IAAA,OAAO,EAAC;AAAA,EACV;AACF;AAEA,SAAS,iBAAiB,MAAA,EAAwB;AAChD,EAAA,QAAQ,MAAA;AAAQ,IACd,KAAK,QAAA;AACH,MAAA,OAAO,8DAAA;AAAA,IACT,KAAK,SAAA;AACH,MAAA,OAAO,wDAAA;AAAA,IACT,KAAK,WAAA;AACH,MAAA,OAAO,gFAAA;AAAA,IACT,KAAK,QAAA;AACH,MAAA,OAAO,gFAAA;AAAA,IACT;AACE,MAAA,OAAO,4CAAA;AAAA;AAEb;;;;"}